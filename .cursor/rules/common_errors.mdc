---
description: 
globs: 
alwaysApply: false
---
# Errores Comunes - AquaLytics

## **1. Over-Engineering en State Management**

### **Error:**
Crear stores de Zustand con más de 500 líneas incluyendo métodos no implementados.

### **Síntoma:**
```typescript
// metrics-store.ts con 736 líneas
export const useMetricsStore = create<MetricsStore>((set, get) => ({
  // ... 200 líneas de estado
  analyzePerformance: () => { /* TODO */ },
  generateRankings: () => { /* TODO */ },
  // ... más TODOs
}))
```

### **Solución:**
```typescript
// metrics-store.ts simplificado (<200 líneas)
export const useMetricsStore = create<MetricsStore>((set) => ({
  metrics: [],
  loading: false,
  error: null,
  
  // Solo métodos esenciales implementados
  fetchMetrics: async () => {
    set({ loading: true })
    const { data, error } = await supabase.from('registros').select()
    set({ metrics: data || [], loading: false, error })
  },
  
  addMetric: (metric) => set((state) => ({ 
    metrics: [...state.metrics, metric] 
  }))
}))
```

## **2. Validaciones Excesivas en CSV**

### **Error:**
Implementar validaciones granulares por celda con detección de anomalías complejas.

### **Síntoma:**
```python
# 678 líneas de validaciones
def validate_row(self, row_data, row_number):
    errors = []
    # Validación tipo por tipo
    # Detección de anomalías
    # Validaciones lógicas complejas
    # ...
```

### **Solución:**
```python
def validate_csv_simple(df):
    """Validación básica para MVP"""
    # Solo validaciones críticas
    required_cols = ['fecha', 'nombre', 't_total', 'brz_total']
    
    # Verificar columnas
    missing = set(required_cols) - set(df.columns)
    if missing:
        return False, f"Columnas faltantes: {missing}"
    
    # Convertir tipos básicos
    df['t_total'] = pd.to_numeric(df['t_total'], errors='coerce')
    df['brz_total'] = pd.to_numeric(df['brz_total'], errors='coerce')
    
    # Eliminar filas con datos críticos faltantes
    df_clean = df.dropna(subset=['t_total', 'brz_total'])
    
    return True, df_clean
```

## **3. Configuración de Herramientas No Utilizadas**

### **Error:**
Configurar webpack para SVG cuando no hay SVGs en el proyecto.

### **Síntoma:**
```typescript
// next.config.ts
webpack: (config) => {
  config.module.rules.push({
    test: /\.svg$/,
    use: ['@svgr/webpack']
  });
  return config;
}
```

### **Solución:**
Eliminar configuraciones no utilizadas y agregar solo cuando sea necesario.

## **4. Carpetas Vacías sin Propósito**

### **Error:**
Mantener carpetas vacías como `/public/icons/` y `/public/images/`.

### **Solución:**
```bash
# Opción 1: Eliminar si no se necesitan
rm -rf public/icons public/images

# Opción 2: Agregar .gitkeep con explicación
echo "# Carpeta para iconos del tema Phoenix" > public/icons/.gitkeep
```

## **5. CORS Demasiado Permisivo**

### **Error:**
```json
// vercel.json
"Access-Control-Allow-Origin": "*"
```

### **Solución:**
```json
// Para desarrollo
"Access-Control-Allow-Origin": "http://localhost:3000"

// Para producción
"Access-Control-Allow-Origin": "https://aqualytics.vercel.app"
```

## **6. Imports y Exports No Utilizados**

### **Error:**
Exportar funciones de hooks que no existen o no se usan.

### **Síntoma:**
```typescript
// store/index.ts
export { useSwimmerOperations } from './swimmers-store' // No existe
```

### **Solución:**
Solo exportar lo que realmente existe y se usa:
```typescript
// store/index.ts
export { useSwimmersStore } from './swimmers-store'
export { useMetricsStore } from './metrics-store'
```

## **7. Dependencias en Cliente que Deberían Estar en Servidor**

### **Error:**
```typescript
// next.config.ts
serverExternalPackages: ['pandas', 'numpy']
```

### **Solución:**
Estas dependencias deben manejarse exclusivamente en el backend Python, no en Next.js.

## **Checklist de Prevención**

Antes de cada commit:
- [ ] ¿Todos los archivos tienen menos de 300 líneas?
- [ ] ¿Todos los métodos TODO han sido eliminados?
- [ ] ¿Las validaciones son las mínimas necesarias?
- [ ] ¿No hay carpetas vacías sin propósito?
- [ ] ¿Las configuraciones corresponden a herramientas en uso?
- [ ] ¿Los imports/exports son todos válidos?
- [ ] ¿El código nuevo sigue el principio YAGNI?

## **SSR - Server Side Rendering**

### Problema: "window is not defined" con Chart.js
```bash
# Error típico:
ReferenceError: window is not defined at hammerjs/hammer.js
```

**Solución:**
```typescript
// ❌ NO: Importar Chart.js plugins directamente
import zoomPlugin from 'chartjs-plugin-zoom'

// ✅ SÍ: Condicionar registro de plugins
if (typeof window !== 'undefined') {
  ChartJS.register(/* plugins solo en cliente */)
}

// ✅ SÍ: Dynamic imports con ssr: false
const MyChart = dynamic(() => import('./Chart'), {
  ssr: false,
  loading: () => <div>Cargando gráfico...</div>
})
```

### Problema: Cache corrupto de Next.js
```bash
# Error típico:
Cannot find module './447.js'
```

**Solución:**
```bash
# Limpiar cache y reiniciar
rm -rf .next
npm run dev
```

### Problema: Plugins de Chart.js en SSR
```typescript
// ❌ NO: chartjs-plugin-zoom causa problemas de SSR
import zoomPlugin from 'chartjs-plugin-zoom'

// ✅ SÍ: Evitar plugins que dependan de window
// Usar solo funcionalidad básica para MVP
```

## **Chart.js - Gráfico Radar**

### Problema: Solapamiento de labels en radar charts
```typescript
// ❌ NO: Sin padding adecuado
scales: {
  r: {
    pointLabels: {
      font: { size: 14 } // Muy grande sin padding
    }
  }
}

// ✅ SÍ: Con padding y font size apropiado
scales: {  
  r: {
    pointLabels: {
      font: { size: 12, weight: 'bold' },
      padding: 20, // Evita solapamiento
    }
  }
}
```

### Problema: Font weight types en Chart.js
```typescript
// ❌ NO: String weight inválido
weight: '500' as const // TypeScript error

// ✅ SÍ: Usar valores válidos
weight: 'bold' as const // 'normal', 'bold', 'bolder', 'lighter'
```

## **Dashboard UX**

### Problema: Labels técnicos en métricas
```typescript
// ❌ NO: Nomenclatura técnica
{ metric: 'avgSpeed', displayName: 'avgSpeed' }

// ✅ SÍ: Labels amigables
{ metric: 'avgSpeed', displayName: 'Velocidad Promedio', unit: 'm/s' }
```

### Problema: Ranking con puntuación general confusa
```typescript
// ❌ NO: OverallScore genera confusión
showOverallScore={true}

// ✅ SÍ: Enfocarse en métricas específicas
showOverallScore={false}
```

## **Patrón MVP de Datos Simulados**

### Para mantener coherencia en datos simulados:
```typescript
// ✅ PATRÓN: Datos simulados realistas
const generateSimulatedData = () => ({
  baseValue: 1.8, // Valor base realista
  variation: (Math.random() - 0.5) * 0.3, // Variación natural
  humanLabels: true, // Siempre usar labels user-friendly
})
```

## **Selectores de Fechas**

### Implementar filtros de tiempo consistentemente:
```typescript
// ✅ PATRÓN: Selector estándar
const [dateRange, setDateRange] = useState<'7d' | '30d' | '3m' | '1y'>('30d')

// Labels consistentes
const getDateRangeLabel = (range) => {
  switch (range) {
    case '7d': return 'Últimos 7 días'
    case '30d': return 'Últimos 30 días' 
    case '3m': return 'Últimos 3 meses'
    case '1y': return 'Último año'
  }
}
```

## **Manejo de Estados de Carga**

### Skeleton screens para gráficos:
```typescript
// ✅ PATRÓN: Loading consistente
if (loading) {
  return (
    <div className="animate-pulse">
      <div className="h-4 bg-muted rounded w-48 mb-4"></div>
      <div className="h-64 bg-muted/30 rounded"></div>
    </div>
  )
}
```

## **Validación de Errores Frecuentes**

- ✅ **Verificar font weights válidos** en Chart.js
- ✅ **Usar padding adecuado** en radar charts (min 15px)
- ✅ **Labels traducidos** nunca nomenclatura técnica
- ✅ **stepSize apropiado** para escalas de porcentaje (20-25)
- ✅ **Datos simulados realistas** con variación natural
- ✅ **Loading states** en todos los gráficos
- ✅ **Dynamic imports** para Chart.js (`ssr: false`)
- ✅ **Limpiar cache .next** después de errores de módulos
- ✅ **Evitar plugins SSR-incompatibles** (chartjs-plugin-zoom)

## **ModalManager ReactNode Type Error**

### Problema: Type 'unknown' is not assignable to type 'ReactNode'
```typescript
// ❌ ERROR: modalData de tipo unknown en JSX
{modalData && (
  <pre>{String(modalData)}</pre>
)}
```

**Solución Temporal para MVP:**
```typescript
// ✅ WORKAROUND: Desactivar error específico
{modalData && (
  <pre>
    {/* eslint-disable-next-line @typescript-eslint/no-explicit-any */}
    {String(modalData as any)}
  </pre>
)}
```

**Solución Futura (Post-MVP):**
- Definir tipos específicos para modalData
- Implementar type guards apropiados
- Usar discriminated unions para diferentes tipos de modal

## **React Keys Duplicadas - [object Object]**

### **Error:**
"Encountered two children with the same key, `[object Object]`. Keys should be unique..."

### **Causa Raíz:**
Se está usando un objeto completo como key en lugar de una propiedad única del objeto.

### **Síntoma:**
```typescript
// ❌ ERROR: Objeto sin key única en map
return metricasGrupo.map(metricDef => ({
  metric: metricDef.shortLabel,
  unit: metricDef.unit,
  // Sin key única - React usa [object Object]
}))
```

### **Solución:**
```typescript
// ✅ CORRECTO: Agregar key única basada en propiedad única
return metricasGrupo.map(metricDef => ({
  key: metricDef.parametro, // Key única para evitar warnings
  metric: metricDef.shortLabel,
  unit: metricDef.unit,
  // ...resto de propiedades
}))
```

### **Prevención:**
- Siempre agregar una propiedad `key` única cuando se crean objetos en `.map()`
- Usar IDs, nombres únicos, o índices como keys
- Nunca usar objetos completos como keys en React

### **Comando de Verificación:**
```bash
# Buscar maps sin keys explícitas
grep -r "\.map.*=>" aqualytics/lib/hooks/ | grep -v "key:"
```

### **Variante: Filtros con Datos Nested de Supabase**
```typescript
// ❌ ERROR: Acceso directo sin filtro robusto
const distancias = [...new Set(registros.map(r => r.distancia))]

// ✅ CORRECTO: Filtros robustos para datos nested
const distanciasRaw = registros
  .map((r: any) => r.distancia?.distancia)
  .filter((dist): dist is number => typeof dist === 'number' && dist > 0)
const distancias = [...new Set(distanciasRaw)]
```

---
*Actualizar esta regla cuando se encuentren nuevos patrones de errores*

## **Iconos Gigantes Morados - Clases CSS No Definidas**

### **Problema:** 
Iconos o elementos aparecen con tamaños incorrectos y colores morados en puertos 3000/3001.

### **Causa Raíz:**
Referencias a clases CSS de TailwindCSS que no están definidas en el tema Phoenix.

### **Síntomas:**
```typescript
// ❌ ERROR: Clases CSS no definidas
className="bg-gradient-to-r from-phoenix-blue/5 to-phoenix-purple/5 border-phoenix-blue/20"

// ❌ ERROR: Colores que no existen en el tema
className="text-purple-600 dark:text-purple-400"
```

### **Solución:**
```typescript
// ✅ CORRECTO: Usar colores definidos en el tema Phoenix
className="bg-gradient-to-r from-phoenix-red/5 to-phoenix-orange/5 border-phoenix-red/20"

// ✅ CORRECTO: Usar colores Phoenix consistentes
className="text-phoenix-red dark:text-phoenix-orange"
```

### **Definir Colores Faltantes en globals.css:**
```css
/* Agregar a :root en globals.css */
--phoenix-blue: #3B82F6;
--phoenix-purple: #A855F7;

/* Agregar a @theme inline */
--color-phoenix-blue: var(--phoenix-blue);
--color-phoenix-purple: var(--phoenix-purple);
```

### **Archivos Comunes Afectados:**
- `components/forms/CompetitionForm.tsx` (línea 205)
- `components/forms/ValidationReport.tsx` (línea 52)
- `app/data-entry/csv/page.tsx` (línea 429)

### **Checklist de Verificación:**
- [ ] Todos los colores `phoenix-*` están definidos en `globals.css`
- [ ] No hay referencias a `purple-600` o `blue-600` sin el prefijo `phoenix-`
- [ ] Las clases de gradiente usan colores existentes
- [ ] Los iconos tienen tamaños consistentes (`h-4 w-4`, `h-5 w-5`)

### **Comando de Verificación:**
```bash
# Buscar clases CSS no definidas
grep -r "phoenix-blue\|phoenix-purple" aqualytics/components/
grep -r "text-purple\|text-blue" aqualytics/components/ | grep -v "phoenix"
```

## **Python vs Python3 Command Error**

### **Error:**
Usar `python` en lugar de `python3` en sistemas Linux/Ubuntu.

### **Síntoma:**
```bash
# ❌ ERROR: Command 'python' not found
fru@frulap:~/AquaLytics-dev/api$ python -m uvicorn test_csv_server:app --host 0.0.0.0 --port 30010
Command 'python' not found, did you mean:
  command 'python3' from deb python3
```

### **Solución:**
```bash
# ✅ CORRECTO: Usar python3 explícitamente
cd /home/fru/AquaLytics-dev/api && python3 -m uvicorn test_csv_server:app --host 0.0.0.0 --port 30010

# ✅ ALTERNATIVA: Activar virtual environment
cd /home/fru/AquaLytics-dev/api
source venv/bin/activate
python -m uvicorn test_csv_server:app --host 0.0.0.0 --port 30010
```

### **Prevención:**
- Siempre usar `python3` en comandos de terminal
- Activar el virtual environment antes de ejecutar scripts Python
- Verificar que `venv/bin/activate` funciona correctamente

## **Missing Python Dependencies Error**

### **Error:**
Dependencias Python no instaladas después de clonar repositorio.

### **Síntoma:**
```bash
# ❌ ERROR: Module not found
/usr/bin/python3: No module named uvicorn
```

### **Solución:**
```bash
# ✅ CORRECTO: Activar virtual environment e instalar dependencias
cd /home/fru/AquaLytics-dev/api
source venv/bin/activate
pip install -r requirements.txt

# Verificar instalación
pip list | grep uvicorn
```

### **Prevención:**
- Siempre verificar que las dependencias están instaladas
- Documentar el proceso de setup en README
- Usar requirements.txt actualizado

## **Asumir Configuraciones Sin Verificar**

### **Error:**
Hacer suposiciones sobre configuración de puertos, rutas o dependencias sin revisar el código real.

### **Síntoma:**
```bash
# ❌ ERROR: Usar puerto incorrecto sin verificar
uvicorn test_csv_server:app --host 0.0.0.0 --port 30010
# Cuando el código real dice:
# uvicorn.run(app, host="0.0.0.0", port=8000)
```

### **Ejemplo Real:**
```python
# El código real en test_csv_server.py línea 261:
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)  # ← PUERTO 8000
```

### **Solución:**
```bash
# ✅ SIEMPRE: Leer el código primero
grep -n "port.*=" api/test_csv_server.py
# O simplemente:
cat api/test_csv_server.py | tail -5

# ✅ DESPUÉS: Ejecutar con configuración real
cd api && source venv/bin/activate && python test_csv_server.py
```

### **Regla de Oro:**
**NUNCA ASUMIR - SIEMPRE VERIFICAR**
1. 🔍 **Leer el código** antes de ejecutar comandos
2. 📝 **Verificar configuraciones** (puertos, rutas, variables)
3. ❓ **Preguntar al usuario** si algo no está claro
4. ✅ **Confirmar funcionamiento** antes de continuar

### **Checklist de Verificación:**
- [ ] ¿Leí la configuración real del código?
- [ ] ¿Verifiqué puertos, rutas y dependencias?
- [ ] ¿Confirmé que funciona antes de asumir siguiente paso?
- [ ] ¿Pregunté al usuario si tuve dudas?

## **Múltiples Instancias de Next.js en Puertos Consecutivos**

### **Error:**
Asumir que puerto 3000 está libre sin verificar puertos consecutivos ocupados por instancias previas.

### **Síntoma:**
```bash
# ❌ ERROR: Asumir puerto libre sin verificar
"Puerto 3000 no hay nada corriendo"

# Pero la realidad:
⚠ Port 3000 is in use, using available port 3006 instead.
```

### **Causa Raíz:**
```bash
# Múltiples instancias de Next.js activas:
tcp LISTEN *:3000 users:(("next-server",pid=298522))
tcp LISTEN *:3001 users:(("next-server",pid=327639))
tcp LISTEN *:3002 users:(("next-server",pid=342165))
tcp LISTEN *:3003 users:(("next-server",pid=346655))
tcp LISTEN *:3004 users:(("next-server",pid=359880))
tcp LISTEN *:3005 users:(("next-server",pid=363724))
tcp LISTEN *:3006 users:(("next-server",pid=364858))
```

### **Solución:**
```bash
# ✅ VERIFICAR: Todos los puertos del rango
ss -tulpn | grep -E ":(300[0-9])"

# ✅ LIMPIAR: Procesos Next.js innecesarios
pkill -f "next-server"

# ✅ VERIFICAR: Que se liberaron los puertos
ss -tulpn | grep -E ":(300[0-9])"

# ✅ ARRANCAR: Una sola instancia limpia
cd aqualytics && npm run dev
```

### **Información de Proyecto:**
- **Ruta correcta:** `AquaLytics-dev/aqualytics` (no asumir)
- **Estructura:** Frontend en `/aqualytics`, Backend en `/api`
- **Puertos normales:** Frontend 3000, Backend 8000

### **Prevención:**
- Siempre verificar rango de puertos antes de arrancar servicios
- Limpiar procesos huérfanos regularmente
- Recordar rutas específicas del proyecto

# UI/UX Component Errors

## Error: Component props not matching interface
- **Problem**: TypeScript errors when passing new props to components
- **Solution**: Always update the interface definition when adding new props
- **Example**: When adding `gradient` and `subtitle` to MetricCard, update MetricCardProps interface

## Error: Missing animations or jarring transitions
- **Problem**: UI feels static or transitions are too abrupt
- **Solution**: Add `transition-all duration-300` to interactive elements, use staggered delays for lists
- **Pattern**: 
  ```tsx
  className="transition-all duration-300 hover:scale-105"
  className="animate-in slide-in-from-bottom duration-500 delay-100"
  ```

## Error: Inconsistent visual hierarchy
- **Problem**: Elements don't have clear importance levels
- **Solution**: Use Phoenix theme gradients for primary elements, consistent spacing (gap-2, gap-4, gap-6)
- **Reference**: See [ui_ux_patterns.mdc](mdc:.cursor/rules/ui_ux_patterns.mdc)

## Error: Poor loading/error states
- **Problem**: Users see blank screens or confusing error messages  
- **Solution**: Always implement loading skeletons, clear error messages with retry actions
- **Pattern**: Center icon + title + description for empty/error states

## Error: Not using established theme classes
- **Problem**: Creating custom styles instead of using Phoenix theme
- **Solution**: Use `phoenix-card`, `phoenix-button`, `phoenix-gradient` classes from globals.css
- **Benefit**: Consistent look and built-in hover effects

## Error: Forgetting responsive design
- **Problem**: UI breaks on mobile or looks cramped
- **Solution**: Always use responsive grid classes and test at different breakpoints
- **Pattern**: `grid-cols-1 md:grid-cols-2 lg:grid-cols-4`
