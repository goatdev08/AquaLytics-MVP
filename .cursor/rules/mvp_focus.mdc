---
description: 
globs: 
alwaysApply: false
---
# Reglas para Enfoque en MVP - AquaLytics

## **Principios Core del MVP**

- **YAGNI (You Ain't Gonna Need It):** No implementar funcionalidades hasta que sean absolutamente necesarias
- **KISS (Keep It Simple, Stupid):** Priorizar simplicidad sobre arquitectura compleja
- **Iteración Rápida:** Es mejor tener algo funcionando simple que algo perfecto incompleto

## **Límites de Complejidad**

### **Archivos y Módulos**
- ✅ **DO:** Mantener archivos bajo 300 líneas de código
- ✅ **DO:** Dividir en módulos cuando superen 200 líneas
- ❌ **DON'T:** Crear abstracciones "por si acaso"
- ❌ **DON'T:** Implementar métodos con TODO para "futuras funcionalidades"

### **State Management (Zustand)**
```typescript
// ✅ DO: Store simple y enfocado
interface MetricsStore {
  metrics: Metric[]
  loading: boolean
  fetchMetrics: () => Promise<void>
  addMetric: (metric: Metric) => void
}

// ❌ DON'T: Store con funcionalidades futuras
interface MetricsStore {
  // ... propiedades básicas
  analyzePerformance: () => void // TODO: Implementar
  generateRankings: () => void // TODO: Implementar
  exportData: () => void // TODO: Implementar
}
```

### **Validaciones**
- ✅ **DO:** Validaciones básicas de tipos y rangos críticos
- ✅ **DO:** Mensajes de error claros para el usuario
- ❌ **DON'T:** Detección de anomalías complejas en MVP
- ❌ **DON'T:** Validaciones granulares que no afecten la funcionalidad core

## **Checklist Pre-Implementación**

Antes de agregar cualquier funcionalidad, pregúntate:
1. ¿Es absolutamente necesario para que el MVP funcione?
2. ¿Puede un usuario completar el flujo principal sin esto?
3. ¿Estamos agregando complejidad innecesaria?
4. ¿Podemos lograr el 80% del valor con el 20% del esfuerzo?

## **Ejemplos Específicos para AquaLytics**

### **CSV Processing**
```python
# ✅ DO: Validación simple
def validate_csv(df):
    required_cols = ['fecha', 'nombre', 't_total']
    missing = [col for col in required_cols if col not in df.columns]
    if missing:
        raise ValueError(f"Columnas faltantes: {missing}")
    
    # Validación básica de tipos
    df['t_total'] = pd.to_numeric(df['t_total'], errors='coerce')
    df = df.dropna(subset=['t_total'])
    return df

# ❌ DON'T: Sobre-ingeniería
def validate_csv(df):
    # 500+ líneas de validaciones
    # Detección de anomalías
    # Validación granular por celda
    # Reportes detallados de cada posible error
```

### **API Routes**
```typescript
// ✅ DO: Endpoint simple y directo
export async function POST(request: Request) {
  const data = await request.json()
  
  // Validación básica
  if (!data.swimmerName || !data.totalTime) {
    return NextResponse.json(
      { error: 'Datos requeridos faltantes' },
      { status: 400 }
    )
  }
  
  // Guardar en Supabase
  const result = await supabase
    .from('registros')
    .insert(data)
  
  return NextResponse.json(result)
}

// ❌ DON'T: Endpoint con lógica compleja innecesaria
export async function POST(request: Request) {
  // Validaciones extensivas
  // Transformaciones complejas
  // Cálculos que podrían ser frontend
  // Manejo de casos edge improbables
}
```

## **Carpetas y Archivos**

- ✅ **DO:** Eliminar carpetas vacías o agregar `.gitkeep` con comentario explicando uso futuro
- ✅ **DO:** Mantener estructura plana hasta que sea necesario anidar
- ❌ **DON'T:** Crear estructura de carpetas "para el futuro"
- ❌ **DON'T:** Mantener archivos de configuración para herramientas no utilizadas

## **Dependencias**

- ✅ **DO:** Usar librerías estables y bien mantenidas
- ✅ **DO:** Preferir soluciones nativas antes que agregar dependencias
- ❌ **DON'T:** Agregar librerías "por si las necesitamos"
- ❌ **DON'T:** Configurar herramientas que no estamos usando

## **Refactoring para MVP**

Cuando encuentres código complejo:
1. **Identifica:** ¿Qué parte es esencial para el MVP?
2. **Extrae:** Mueve funcionalidad no-MVP a archivos `*.future.ts` o `*.post-mvp.ts`
3. **Simplifica:** Reemplaza con la implementación más simple posible
4. **Documenta:** Agrega comentario explicando qué se simplificó y por qué

### **Para Procesamiento de Datos**
- ✅ **DO:** Validaciones básicas (tipos, rangos, campos requeridos)
- ✅ **DO:** Mensajes de error claros y accionables
- ❌ **DON'T:** Detección de anomalías estadísticas
- ❌ **DON'T:** Análisis de coherencia complejo
- ❌ **DON'T:** Reportes granulares fila por fila

**Ejemplo aprendido:**
```python
# ❌ MALO: CSV Processor con 678 líneas
class CSVProcessor:
    def detect_anomalies()...
    def validate_row_by_row()...
    def statistical_analysis()...
    
# ✅ BUENO: CSV Processor simplificado ~200 líneas
class CSVProcessor:
    def validate_basic_types()...
    def check_required_fields()...
    def validate_ranges()...
```
