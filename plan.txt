# AquaLytics App – Product Requirements Document (PRD)

## 1. Executive Summary
AquaLytics App is a single‑repository, data‑driven web application for high‑performance swimming analytics.  
Its core value = **capture ➜ calculate ➜ visualise 16 key metrics per race**.  
To shorten development time, frontend, backend and data analysis live together in a Next.js + Python serverless stack deployed entirely on Vercel.

---

## 2. Goals & Objectives
1. **Ingest race data** (manual form or CSV upload).
2. **Compute 16 metrics** automatically.
3. **Store & query** all data in Supabase (PostgreSQL).
4. **Render interactive charts** for coaches to compare and analize swimmers and races.
5. **Maintain a clean codebase ≤ 4 000 LOC** in v1.
6. **Provide Valuable insights for the user to discover areas of improvement on swimming performance (e.g. Distance per stroke visualization, identify speed drops in a certain segment of the race). 
---

## 3. Success Metrics
* T‑0: Upload ≤ 5 s for 100 race rows.
* Dashboard loads ≤ 300 ms p95 for 50 concurrent users.
* ≥ 3 coaches adopt MVP in first 2 weeks.

---

## 4. Users & Key Flows
| User | Flow | Outcome |
|------|------|---------|
| **Coach** | Upload CSV / enter form → view charts | Immediate insights |
| **Analyst** | Export data via Supabase → run offline models | Advanced study |
| **Swimmer (optional)** | Read‑only dashboard | Self‑evaluation |

---

## 5. Technical Architecture

### 5.1 High‑Level Diagram
```
Browser ─► Next.js (React 18/19 App Router)
           ├─ app/ (pages, server components)
           └─ api/ (Python serverless: Starlette)
                         └─ analysis/analysis.py
                                 ▲
Supabase (PostgreSQL) ◄──────────┘
```

### 5.2 Rationale
* **Next.js App Router** provides unified SSR/ISR routing and Server Actions.  
* **Python serverless on Vercel** Enables Pandas analytics without a separate host.  
* **Starlette** keeps handler code minimal and cold‑start friendly.  
* **Supabase** gives managed Postgres + optional auth + storage.

---

## 6. Detailed File / Folder Structure
```
hydrolytics/
├── app/                       # React UI
│   ├── page.tsx               # Landing & dashboards
│   ├── upload/page.tsx        # CSV & manual entry
│   └── compare/page.tsx       # Swimmer/race comparison
│
├── api/                       # Serverless Python
│   ├── ingest.py              # POST: ingest data + auto‑metrics
│   └── metrics.py             # GET: fetch metrics & comparisons
│
├── analysis/
│   └── analysis.py            # calc_16_metrics(data_dict) -> dict
│
├── public/metrics.json        # Metric dictionary (16 codes)
├── utils/                     # TS helpers (formatting, fetcher)
├── requirements.txt           # Python deps
├── package.json               # Node deps
└── README.md
```

#### 6.1 `metrics.json` SAMPLE
```json
[
  { "code":"RACE_TIME","label":"Race Time","unit":"sec","type":"manual"},
  { "code":"50_SPL","label":"Stroke Rate 50 m","unit":"strokes/min","type":"auto","calc":"stroke_rate"}
  /* …14 more… */
]
```

---

## 7. Data Model (Supabase)

Use supabase mcp server to review 'Phoenixdb' Database structure to understand table relationship

---

## 8. API Contract (internal)

| Route | Method | Body / Query | Response |
|-------|--------|--------------|----------|
| `/api/ingest.py` | POST | Multipart (CSV) or JSON payload | `{status, inserted}` |
| `/api/metrics.py` | GET | `swimmer_id`, `competition_id` | `{metrics:[{code,value}]}` |

_No external network calls between FE & BE.  Everything runs on the same Vercel domain._

---

## 9. Key Dependencies

### Node
- `next@15` – App Router
- `react@19`, `react-dom@19`
- `tailwindcss@3`, `autoprefixer`, `postcss`
- `plotly.js@3`
- `@supabase/supabase-js@2`

### Python
- `starlette==0.36`
- `pandas==2.3`
- `numpy==1.27`
- `supabase-py==2.3`
- `python-multipart==0.0.7`
- `chardet==5.2`

---

## 10. Non‑Functional Requirements
* **Security:** Env vars via Vercel; no PII in logs.
* **Performance:** Cold start < 500 ms 95‑percentile.
* **Scalability:** Vercel auto‑scales; Supabase row‑level security ready.
* **Maintainability:** ESLint/Prettier + 90 % unit test coverage on `analysis.py`.

---

## 11. Out of Scope (v1)
* Auth (can be added via Supabase in v2).
* PDF/Excel export.
* Predictive ML models.

Metrics Dictionary:

{
  "description": "Métricas iniciales para AquaLytics",
  "version": "1.0",
  "created_by": "AquaLytics System",
  "metrics": [
    {
      "parametro": "T15 (1)",
      "tipo": "M",
      "global": false,
      "description": "Tiempo 15m (Primer Segmento)"
    },
    {
      "parametro": "# de BRZ 1",
      "tipo": "M", 
      "global": false,
      "description": "Número de Brazadas (Primer Segmento)"
    },
    {
      "parametro": "V1",
      "tipo": "A",
      "global": false,
      "description": "Velocidad (Primer Segmento)"
    },
    {
      "parametro": "T25 (1)",
      "tipo": "M",
      "global": false,
      "description": "Tiempo (Primer Segmento)"
    },
    {
      "parametro": "F1",
      "tipo": "M",
      "global": false,
      "description": "Flecha (Primer Segmento)"
    },
    {
      "parametro": "T15 (2)",
      "tipo": "M",
      "global": false,
      "description": "Tiempo 15m (Segundo Segmento)"
    },
    {
      "parametro": "# de BRZ 2",
      "tipo": "M",
      "global": false,
      "description": "Número de Brazadas (Segundo Segmento)"
    },
    {
      "parametro": "V2",
      "tipo": "A",
      "global": false,
      "description": "Velocidad (Segundo Segmento)"
    },
    {
      "parametro": "T25 (2)",
      "tipo": "M",
      "global": false,
      "description": "Tiempo (Segundo Segmento)"
    },
    {
      "parametro": "F2",
      "tipo": "M",
      "global": false,
      "description": "Flecha (Segundo Segmento)"
    },
    {
      "parametro": "T TOTAL",
      "tipo": "M",
      "global": true,
      "description": "Tiempo Total"
    },
    {
      "parametro": "BRZ TOTAL",
      "tipo": "A",
      "global": true,
      "description": "Total de Brazadas"
    },
    {
      "parametro": "V promedio",
      "tipo": "A",
      "global": true,
      "description": "Velocidad Promedio"
    },
    {
      "parametro": "DIST x BRZ",
      "tipo": "A",
      "global": true,
      "description": "Distancia por Brazada"
    },
    {
      "parametro": "DIST sin F",
      "tipo": "A",
      "global": true,
      "description": "Distancia sin Flecha"
    },
    {
      "parametro": "F promedio",
      "tipo": "A",
      "global": true,
      "description": "Promedio de Flecha"
    }
  ]
} 
