{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Next.js 15 Project with TypeScript",
        "description": "Set up the foundational Next.js 15 project with App Router, TypeScript, and essential configurations",
        "details": "Create new Next.js 15 project using `npx create-next-app@latest aqualytics --typescript --tailwind --eslint --app --src-dir=false`. Configure next.config.js for serverless functions, set up TypeScript strict mode, and configure ESLint with Next.js rules. Install core dependencies: @supabase/supabase-js@^2.39.0, zustand@^4.4.7, react-hook-form@^7.48.2, @hookform/resolvers@^3.3.2, zod@^3.22.4, chart.js@^4.4.0, react-chartjs-2@^5.2.0, date-fns@^2.30.0, clsx@^2.0.0, tailwind-merge@^2.0.0. Set up folder structure according to PRD specifications.",
        "testStrategy": "Verify project builds successfully with `npm run build`, TypeScript compiles without errors, and all dependencies are correctly installed. Test dev server starts on localhost:3000.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Configure Supabase Connection and Environment Variables",
        "description": "Set up Supabase client configuration and environment variables for the Phoenixdb database",
        "details": "Create lib/supabase.ts with Supabase client using provided credentials (URL: https://ombbxzdptnasoipzpmfh.supabase.co). Set up .env.local with NEXT_PUBLIC_SUPABASE_URL, NEXT_PUBLIC_SUPABASE_ANON_KEY, and SUPABASE_SERVICE_ROLE_KEY. Create separate client configurations for frontend (anon key) and backend (service role). Implement connection testing utility to verify database connectivity.",
        "testStrategy": "Test Supabase connection by querying a simple table, verify environment variables are loaded correctly, and ensure both anon and service role keys work appropriately.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Install Supabase Client Library",
            "description": "Add the Supabase client library to the project dependencies.",
            "dependencies": [],
            "details": "Use npm or yarn to install the '@supabase/supabase-js' package.",
            "status": "done",
            "testStrategy": "Verify the package is listed in 'package.json' and can be imported without errors."
          },
          {
            "id": 2,
            "title": "Create Environment Variables File",
            "description": "Set up a '.env.local' file to store Supabase credentials securely.",
            "dependencies": [],
            "details": "Create a '.env.local' file in the project root and add 'NEXT_PUBLIC_SUPABASE_URL', 'NEXT_PUBLIC_SUPABASE_ANON_KEY', and 'SUPABASE_SERVICE_ROLE_KEY' with their respective values.",
            "status": "done",
            "testStrategy": "Ensure the environment variables are accessible in the application by logging their values."
          },
          {
            "id": 3,
            "title": "Initialize Supabase Client for Frontend",
            "description": "Configure the Supabase client for frontend usage with the anonymous key.",
            "dependencies": [
              1,
              2
            ],
            "details": "Create 'lib/supabase.ts' and initialize the Supabase client using 'NEXT_PUBLIC_SUPABASE_URL' and 'NEXT_PUBLIC_SUPABASE_ANON_KEY'.",
            "status": "done",
            "testStrategy": "Import the client in a frontend component and test a simple query to confirm functionality."
          },
          {
            "id": 4,
            "title": "Initialize Supabase Client for Backend",
            "description": "Configure the Supabase client for backend usage with the service role key.",
            "dependencies": [
              1,
              2
            ],
            "details": "In 'lib/supabase.ts', initialize a separate Supabase client using 'NEXT_PUBLIC_SUPABASE_URL' and 'SUPABASE_SERVICE_ROLE_KEY'.",
            "status": "done",
            "testStrategy": "Use the backend client in an API route to perform a privileged operation and verify the result."
          },
          {
            "id": 5,
            "title": "Implement Connection Testing Utility",
            "description": "Develop a utility function to verify database connectivity.",
            "dependencies": [
              3,
              4
            ],
            "details": "Create a function that uses both frontend and backend clients to perform a simple query, confirming successful connections.",
            "status": "done",
            "testStrategy": "Run the utility and check for successful responses from both clients."
          },
          {
            "id": 6,
            "title": "Secure Environment Variables in Deployment",
            "description": "Ensure environment variables are correctly set in the deployment environment.",
            "dependencies": [
              2
            ],
            "details": "Configure the deployment platform to include the necessary environment variables securely.",
            "status": "done",
            "testStrategy": "Deploy the application and verify that the environment variables are correctly set and accessible."
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement Phoenix Theme with TailwindCSS",
        "description": "Create the Phoenix visual theme with custom colors, gradients, and responsive design system",
        "details": "Configure tailwind.config.js with Phoenix color palette: --phoenix-red: #DC2626, --phoenix-orange: #EA580C, --phoenix-yellow: #D97706. Set up gradient utilities for Phoenix theme. Create app/globals.css with custom CSS variables for light/dark mode. Implement responsive breakpoints (mobile: 320px-640px, tablet: 641px-1024px, desktop: 1025px+). Add hover effects and transition utilities. Create utility classes for Phoenix gradients and theme consistency.",
        "testStrategy": "Verify all Phoenix colors render correctly, test responsive breakpoints on different screen sizes, validate dark/light mode switching, and ensure gradient effects display properly across browsers.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure TailwindCSS with Phoenix Color Palette",
            "description": "Set up TailwindCSS to use the Phoenix color palette by customizing the tailwind.config.js file.",
            "dependencies": [],
            "details": "Modify the tailwind.config.js file to include the Phoenix color palette with the following colors: --phoenix-red: #DC2626, --phoenix-orange: #EA580C, --phoenix-yellow: #D97706. This involves extending the default theme colors in TailwindCSS.",
            "status": "done",
            "testStrategy": "Verify that the custom colors are available by applying them to elements and checking the rendered styles."
          },
          {
            "id": 2,
            "title": "Set Up Gradient Utilities for Phoenix Theme",
            "description": "Create custom gradient utilities in TailwindCSS to reflect the Phoenix theme's design.",
            "dependencies": [
              1
            ],
            "details": "Extend the TailwindCSS configuration to include custom gradient color stops that align with the Phoenix color palette. This may involve defining new gradient utilities or modifying existing ones to incorporate the Phoenix colors.",
            "status": "done",
            "testStrategy": "Apply the custom gradient utilities to elements and ensure they render correctly with the specified colors."
          },
          {
            "id": 3,
            "title": "Implement Responsive Design Breakpoints",
            "description": "Define and configure responsive design breakpoints in TailwindCSS to support various device sizes.",
            "dependencies": [],
            "details": "Customize the tailwind.config.js file to set up responsive breakpoints for mobile (320px-640px), tablet (641px-1024px), and desktop (1025px+). This involves defining the 'screens' property with the specified min-width values for each breakpoint.",
            "status": "done",
            "testStrategy": "Test the responsiveness of the design by resizing the browser window and verifying that styles adjust appropriately at each breakpoint."
          },
          {
            "id": 4,
            "title": "Create Global Styles with CSS Variables for Light/Dark Mode",
            "description": "Develop a global stylesheet that includes CSS variables to support both light and dark modes.",
            "dependencies": [],
            "details": "Create an app/globals.css file that defines CSS variables for colors and other design tokens. Implement styles for both light and dark modes by setting up appropriate CSS variables and using media queries or classes to toggle between modes.",
            "status": "done",
            "testStrategy": "Switch between light and dark modes and verify that the styles update correctly according to the defined variables."
          },
          {
            "id": 5,
            "title": "Add Hover Effects and Transition Utilities",
            "description": "Enhance the user interface by adding hover effects and transition utilities using TailwindCSS.",
            "dependencies": [
              1
            ],
            "details": "Utilize TailwindCSS's built-in hover and transition utilities to add interactive effects to elements. This includes applying hover states, focus states, and smooth transitions to buttons, links, and other interactive components.",
            "status": "done",
            "testStrategy": "Interact with the elements to ensure that hover effects and transitions are applied correctly and provide a smooth user experience."
          }
        ]
      },
      {
        "id": 4,
        "title": "Create Database Schema and Seed Data",
        "description": "Set up the complete database schema integration with the existing Supabase Phoenixdb database, including TypeScript models, helper functions, and automatic calculation utilities",
        "status": "done",
        "dependencies": [
          2
        ],
        "priority": "high",
        "details": "The Phoenixdb database already exists with all required tables and data: nadadores (id_nadador PK, nombre, edad, peso), competencias (competencia_id PK, competencia, periodo), distancias (distancia_id PK, distancia), estilos (estilo_id PK, estilo), fases (fase_id PK, fase), parametros (parametro_id PK, parametro, tipo, global), registros (registro_id PK, competencia_id FK, fecha, id_nadador FK, distancia_id FK, estilo_id FK, fase_id FK, parametro_id FK, segmento, valor). Create TypeScript models compatible with the existing schema, implement helper functions for database queries, develop automatic calculation utilities, and set up test API endpoints.",
        "testStrategy": "Verify TypeScript models match the existing database schema, test helper functions return correct data, validate automatic calculations produce accurate results, and ensure test API endpoints work properly with the existing database.",
        "subtasks": [
          {
            "id": 3,
            "title": "Set Up Database Migrations",
            "description": "Configure database migrations to manage schema changes systematically.",
            "status": "done",
            "dependencies": [
              2
            ],
            "details": "Use Supabase CLI to generate migration files that capture the current schema state, facilitating version control and future schema modifications.",
            "testStrategy": "Run migration commands to ensure they apply the schema changes correctly without errors."
          },
          {
            "id": 6,
            "title": "Optimize Database Performance",
            "description": "Enhance database performance by creating indexes on frequently queried columns.",
            "status": "done",
            "dependencies": [
              2
            ],
            "details": "Identify columns that are commonly used in queries and create appropriate indexes to improve query performance.",
            "testStrategy": "Analyze query execution plans before and after indexing to measure performance improvements."
          },
          {
            "id": 7,
            "title": "Implement Row-Level Security (RLS)",
            "description": "Configure RLS policies to control access to data at the row level.",
            "status": "done",
            "dependencies": [
              2
            ],
            "details": "Define and apply RLS policies to ensure that users can only access data they are authorized to view or modify.",
            "testStrategy": "Test access controls by attempting to access data with different user roles and verifying that permissions are enforced correctly."
          },
          {
            "id": 8,
            "title": "Document Database Schema and Processes",
            "description": "Create comprehensive documentation for the database schema and related processes.",
            "status": "done",
            "dependencies": [
              1,
              3,
              4,
              7
            ],
            "details": "Document the schema design, migration procedures, seeding processes, and security policies to facilitate future maintenance and onboarding.",
            "testStrategy": "Review the documentation for accuracy, completeness, and clarity to ensure it serves as a reliable reference."
          },
          {
            "id": 9,
            "title": "Create TypeScript Models for Database Schema",
            "description": "Develop TypeScript interfaces and types that match the existing Phoenixdb database schema.",
            "status": "done",
            "dependencies": [
              2
            ],
            "details": "Create TypeScript models for all tables: Nadador, Competencia, Distancia, Estilo, Fase, Parametro, and Registro. Include proper typing for all columns, foreign key relationships, and optional fields.",
            "testStrategy": "Verify that TypeScript models accurately reflect the database schema structure and provide proper type safety for database operations."
          },
          {
            "id": 10,
            "title": "Implement Database Helper Functions",
            "description": "Create utility functions for common database queries and operations.",
            "status": "done",
            "dependencies": [
              9
            ],
            "details": "Develop helper functions for CRUD operations on each table, including functions for fetching swimmers, competitions, parameters, and records with proper joins and filtering capabilities.",
            "testStrategy": "Test each helper function to ensure it returns correct data and handles edge cases properly."
          },
          {
            "id": 11,
            "title": "Develop Automatic Calculation Utilities",
            "description": "Create utilities for automatic calculation of swimming performance metrics.",
            "status": "done",
            "dependencies": [
              9,
              10
            ],
            "details": "Implement calculation functions for the 6 automatic parameters based on manual measurements, including stroke rate, distance per stroke, and other performance metrics.",
            "testStrategy": "Validate calculation accuracy by comparing results with known expected values and testing with various input scenarios."
          },
          {
            "id": 12,
            "title": "Set Up Test API Endpoints",
            "description": "Create API endpoints for testing database integration and calculations.",
            "status": "done",
            "dependencies": [
              10,
              11
            ],
            "details": "Develop test API routes that demonstrate database connectivity, data retrieval, and automatic calculations using the existing Phoenixdb data.",
            "testStrategy": "Test API endpoints to ensure they properly connect to the database, return expected data formats, and perform calculations correctly."
          },
          {
            "id": 1,
            "title": "Design Database Schema",
            "description": "Define the structure of the database by identifying tables, columns, data types, and relationships.",
            "dependencies": [],
            "details": "Create a detailed schema diagram outlining tables such as 'nadadores', 'competencias', 'distancias', 'estilos', 'fases', 'parametros', and 'registros', including their respective columns and relationships.",
            "status": "done",
            "testStrategy": "Review the schema diagram for completeness and correctness, ensuring all necessary tables and relationships are accurately represented."
          },
          {
            "id": 2,
            "title": "Implement Database Schema in Supabase",
            "description": "Create the defined tables and relationships in Supabase using SQL scripts.",
            "dependencies": [
              1
            ],
            "details": "Utilize Supabase's SQL editor to execute scripts that create the tables and establish foreign key relationships as per the designed schema.",
            "status": "done",
            "testStrategy": "Verify the successful creation of tables and relationships by inspecting the database schema in the Supabase dashboard."
          },
          {
            "id": 4,
            "title": "Create Seed Data Scripts",
            "description": "Develop SQL scripts to populate tables with initial reference data.",
            "dependencies": [
              2
            ],
            "details": "Write SQL insert statements for tables like 'distancias', 'estilos', 'fases', and 'parametros' to include predefined values.",
            "status": "done",
            "testStrategy": "Execute the seed scripts and confirm that the tables are populated with the correct initial data."
          },
          {
            "id": 5,
            "title": "Implement Data Seeding in Supabase",
            "description": "Integrate seed data scripts into Supabase's seeding mechanism.",
            "dependencies": [
              4
            ],
            "details": "Place the seed scripts in the 'supabase/seed.sql' file to ensure they run automatically during database initialization.",
            "status": "done",
            "testStrategy": "Reset the database and verify that the seed data is inserted correctly during the initialization process."
          }
        ]
      },
      {
        "id": 5,
        "title": "Build Base UI Components Library",
        "description": "Create reusable UI components following Phoenix theme and design system",
        "details": "Create components/ui/ directory with base components: Button.tsx (with Phoenix gradient variants, hover effects, loading states), Input.tsx (with validation states, Phoenix focus colors), Select.tsx (custom dropdown with Phoenix styling), Card.tsx (with Phoenix subtle gradients, hover lift effects), Modal.tsx (with backdrop blur, Phoenix accents), LoadingSpinner.tsx (with Phoenix gradient animation). Each component should support light/dark mode, be fully typed with TypeScript, and include proper accessibility attributes. Use clsx and tailwind-merge for conditional styling.",
        "testStrategy": "Test each component in isolation with Storybook-like approach, verify accessibility with screen readers, validate responsive behavior, and ensure Phoenix theme consistency across all variants.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement TypeScript Types and Database Interfaces",
        "description": "Create comprehensive TypeScript definitions for database entities and API responses",
        "details": "Create lib/types/ directory with: database.ts (Supabase table types: Nadador, Competencia, Distancia, Estilo, Fase, Parametro, Registro), metrics.ts (MetricFormData interface, AutomaticMetrics interface, MetricCalculationInput), api.ts (API request/response types, error handling types). Generate types from Supabase schema using supabase gen types. Create utility types for form validation, chart data structures, and filter interfaces. Ensure all types are exported from a central index.ts file.",
        "testStrategy": "Verify TypeScript compilation with strict mode, test type inference works correctly, validate all database operations are properly typed, and ensure no 'any' types are used in production code.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Create Layout Components and Navigation",
        "description": "Build the main application layout with header, sidebar, and navigation components",
        "status": "done",
        "dependencies": [
          5
        ],
        "priority": "medium",
        "details": "Create app/layout.tsx as root layout with Phoenix theme provider, dark mode toggle, and responsive structure. Build components/layout/Header.tsx with navigation menu, app title with Phoenix gradient, user actions, and mobile hamburger menu. Create components/layout/Footer.tsx with app info and links. Implement components/layout/MainLayout.tsx with flexible layout system. Use Next.js App Router for navigation with proper loading states and error boundaries.",
        "testStrategy": "Test navigation between all routes, verify responsive behavior on mobile/tablet/desktop, validate dark mode toggle works across all components, ensure proper loading states during navigation, and verify SEO optimization and PWA functionality.",
        "subtasks": [
          {
            "id": 1,
            "title": "Root Layout Setup with Phoenix Theme Provider",
            "description": "Create the root layout component with Phoenix theme provider integration, including dark mode support, global styles, and Next.js App Router configuration",
            "status": "completed",
            "dependencies": [],
            "details": "Set up app/layout.tsx with Phoenix theme provider wrapper, configure theme tokens for light/dark modes, implement lib/context/ThemeContext.tsx for global state management, add global CSS variables and typography styles, integrate with Next.js metadata API for SEO optimization, ensure proper SSR hydration, and add PWA support with mobile-first design",
            "testStrategy": "Verify theme switching works correctly, test SSR hydration, validate PWA functionality, and ensure SEO metadata is properly applied"
          },
          {
            "id": 2,
            "title": "Header Component with Navigation and Responsive Menu",
            "description": "Build responsive header component with main navigation, mobile hamburger menu, theme toggle, and user authentication elements",
            "status": "completed",
            "dependencies": [
              1
            ],
            "details": "Create components/layout/Header.tsx with Phoenix gradient logo, primary navigation menu for Dashboard/Ingreso/Análisis/Nadadores routes, responsive breakpoints using Phoenix design tokens, mobile hamburger menu with smooth slide-out animations, integrated theme switcher with localStorage persistence, tooltips and active states, sticky navigation with backdrop blur, and complete ARIA accessibility attributes",
            "testStrategy": "Test responsive behavior across devices, verify mobile hamburger menu animations, validate theme toggle persistence, and ensure navigation active states work correctly"
          },
          {
            "id": 3,
            "title": "Footer Component with Corporate Information",
            "description": "Develop modern footer component with organized links, social media, and corporate information using Phoenix design system",
            "status": "completed",
            "dependencies": [
              1
            ],
            "details": "Build components/layout/Footer.tsx with organized link categories (Producto, Recursos, Empresa), social media integration, corporate information and badges, version status indicators, responsive design for mobile devices, and consistent Phoenix styling with gradients and hover effects",
            "testStrategy": "Verify footer links work correctly, test responsive layout on mobile devices, and validate social media integration"
          },
          {
            "id": 4,
            "title": "MainLayout Integration and Landing Page",
            "description": "Create flexible MainLayout system and update landing page with Phoenix design integration",
            "status": "completed",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Build components/layout/MainLayout.tsx with flexible layout system supporting multiple specialized layouts (Auth, Dashboard, Analytics), integrate header/footer/main structure with responsive design, create placeholder for future sidebar implementation, update app/page.tsx with modern landing page featuring hero section with Phoenix CTAs, feature cards with SVG icons, animated statistics section, and conversion-optimized final CTA",
            "testStrategy": "Test layout flexibility across different page types, verify landing page responsiveness and animations, validate CTA functionality, and ensure proper routing integration with Next.js App Router"
          }
        ]
      },
      {
        "id": 8,
        "title": "Implement Zustand State Management Stores",
        "description": "Set up centralized state management for swimmers, metrics, and UI state",
        "details": "Create lib/store/ directory with: swimmers-store.ts (swimmer CRUD operations, current swimmer selection, swimmer list with caching), metrics-store.ts (metrics data, calculations cache, filter state), ui-store.ts (modal states, loading states, theme preferences, sidebar collapse state). Each store should include proper TypeScript typing, persistence for relevant data, optimistic updates, and error handling. Implement store devtools integration for development.",
        "testStrategy": "Test store actions update state correctly, verify persistence works across browser sessions, validate optimistic updates with rollback on errors, and ensure store devtools show proper state changes.",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Build Python Serverless Functions Infrastructure",
        "description": "Set up Python serverless functions for data processing and metric calculations",
        "details": "Create api/ directory with Python serverless functions using Starlette framework. Set up ingest.py for data ingestion with automatic metric calculation, metrics.py for data querying with filters. Create calculations/swimming_metrics.py with SwimmingMetricsCalculator class implementing all 6 automatic metric formulas (V1, V2, V promedio, DIST x BRZ, DIST sin F, F promedio). Set up utils/supabase_client.py for database operations, data_validation.py for input validation, csv_processor.py for CSV file handling. Configure requirements.txt with starlette==0.36.3, pandas==2.2.0, numpy==1.26.2, supabase-py==2.3.0, python-multipart==0.0.6.",
        "testStrategy": "Test each Python function independently, verify metric calculations match expected formulas, validate CSV processing handles various formats, and ensure proper error handling and logging.",
        "priority": "high",
        "dependencies": [
          4,
          6
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Set Up Project Structure and Dependencies",
            "description": "Initialize the project directory and configure necessary dependencies.",
            "dependencies": [],
            "details": "Create the project directory with the following structure: api/, calculations/, and utils/. Configure a virtual environment and install dependencies listed in requirements.txt, including Starlette, pandas, numpy, supabase-py, and python-multipart.",
            "status": "done",
            "testStrategy": "Verify that all dependencies are installed correctly and the project structure is set up as specified."
          },
          {
            "id": 2,
            "title": "Develop Data Ingestion Function",
            "description": "Create a serverless function for data ingestion with automatic metric calculation.",
            "dependencies": [
              1
            ],
            "details": "In the api/ directory, create ingest.py using the Starlette framework. Implement functionality to receive data, validate inputs, and calculate metrics automatically upon ingestion.",
            "status": "done",
            "testStrategy": "Test the function by sending sample data and verifying that metrics are calculated and stored correctly."
          },
          {
            "id": 3,
            "title": "Develop Data Querying Function",
            "description": "Create a serverless function for querying data with filters.",
            "dependencies": [
              1
            ],
            "details": "In the api/ directory, create metrics.py using the Starlette framework. Implement functionality to query stored data with various filters and return the results.",
            "status": "done",
            "testStrategy": "Test the function by querying data with different filters and verifying the accuracy of the returned results."
          },
          {
            "id": 4,
            "title": "Implement Swimming Metrics Calculator",
            "description": "Develop a class to calculate swimming metrics.",
            "dependencies": [
              1
            ],
            "details": "In the calculations/ directory, create swimming_metrics.py containing the SwimmingMetricsCalculator class. Implement all six automatic metric formulas: V1, V2, V promedio, DIST x BRZ, DIST sin F, and F promedio.",
            "status": "done",
            "testStrategy": "Unit test each metric calculation method with predefined inputs and expected outputs to ensure correctness."
          },
          {
            "id": 5,
            "title": "Set Up Database Operations Utility",
            "description": "Create a utility for database interactions.",
            "dependencies": [
              1
            ],
            "details": "In the utils/ directory, create supabase_client.py to handle database operations using the supabase-py library. Implement functions for connecting to the database, inserting data, and querying data.",
            "status": "done",
            "testStrategy": "Test database connection and operations by performing CRUD operations and verifying the results."
          },
          {
            "id": 6,
            "title": "Implement Input Validation Utility",
            "description": "Create a utility for validating input data.",
            "dependencies": [
              1
            ],
            "details": "In the utils/ directory, create data_validation.py to validate incoming data for the serverless functions. Implement functions to check data types, required fields, and value ranges.",
            "status": "done",
            "testStrategy": "Test validation functions with various input scenarios to ensure they correctly identify valid and invalid data."
          },
          {
            "id": 7,
            "title": "Develop CSV File Handling Utility",
            "description": "Create a utility for processing CSV files.",
            "dependencies": [
              1
            ],
            "details": "In the utils/ directory, create csv_processor.py to handle CSV file operations. Implement functions to read, parse, and validate CSV files for data ingestion.",
            "status": "done",
            "testStrategy": "Test CSV processing functions with sample files to ensure correct parsing and validation of data."
          }
        ]
      },
      {
        "id": 10,
        "title": "Create Data Validation System",
        "description": "Implement comprehensive data validation for both frontend and backend - COMPLETED with advanced features and optimizations",
        "status": "done",
        "dependencies": [
          6,
          9
        ],
        "priority": "high",
        "details": "✅ COMPLETED: Comprehensive data validation system implemented with advanced features. Frontend includes lib/utils/validators.ts with complete Zod schemas for MetricFormSchema, CSV validation, swimmers, and competitions with real-time validation and Spanish error messages. Backend features optimized api/utils/data_validation.py with stricter validation rules (10% tolerance), velocity coherence checks, and enhanced stroke/time consistency validation. Added custom React hooks in lib/hooks/useValidation.ts for real-time form validation with React Hook Form integration, batch CSV validation support, and performance optimizations using useMemo and useCallback. System includes validation for time ranges (5.00-180.00s), stroke counts (1-100), underwater distances (0.00-15.00m), consistency checks (T_TOTAL ≥ T25_1 + T25_2), velocity difference detection, and contextual error messaging for improved UX.",
        "testStrategy": "✅ COMPLETED: All validation rules tested with edge cases, frontend validation provides immediate feedback, backend validation catches all invalid data with stricter 10% tolerance rules, error messages are user-friendly and contextual in Spanish, velocity coherence validation working, and performance optimized for real-time validation.",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Frontend Zod Validation Schemas",
            "description": "Implement lib/utils/validators.ts with comprehensive Zod schemas",
            "status": "completed",
            "dependencies": [],
            "details": "✅ Created complete Zod schemas for MetricFormSchema, CSV validation, swimmers, and competitions with real-time validation and Spanish error messages",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Backend Data Validation",
            "description": "Create optimized api/utils/data_validation.py with DataValidator class",
            "status": "completed",
            "dependencies": [],
            "details": "✅ Enhanced backend validation with stricter rules (10% tolerance), velocity coherence checks, and improved stroke/time consistency validation",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create Custom React Validation Hooks",
            "description": "Implement lib/hooks/useValidation.ts with custom hooks for form validation",
            "status": "completed",
            "dependencies": [],
            "details": "✅ Created custom React hooks for real-time validation with React Hook Form integration, batch CSV validation, and performance optimizations",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Advanced Validation Rules",
            "description": "Add velocity coherence validation and stricter consistency checks",
            "status": "completed",
            "dependencies": [],
            "details": "✅ Implemented advanced validation including velocity difference detection, stricter tolerance rules, and enhanced underwater distance validation",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Optimize Performance and UX",
            "description": "Implement performance optimizations and improve user experience",
            "status": "completed",
            "dependencies": [],
            "details": "✅ Added useMemo and useCallback optimizations, contextual Spanish error messages, and improved real-time validation feedback",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 11,
        "title": "Build Swimmer Management System",
        "description": "Create CRUD operations for swimmer management with forms and API integration",
        "details": "Create components/forms/SwimmerForm.tsx using React Hook Form with Zod validation for swimmer creation/editing (nombre, edad optional, peso optional). Build app/api/swimmers/route.ts with GET (list all swimmers with metrics), POST (create swimmer), PUT (update swimmer), DELETE (remove swimmer) endpoints. Implement lib/hooks/useSwimmers.ts custom hook for swimmer operations with caching and optimistic updates. Create swimmer selection components for forms and filters.",
        "testStrategy": "Test CRUD operations work correctly, verify form validation prevents invalid submissions, validate optimistic updates with error rollback, and ensure swimmer data displays properly in all components.",
        "priority": "medium",
        "dependencies": [
          8,
          10
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Implement Competition and Reference Data Management",
        "description": "Create management interfaces for competitions, distances, strokes, and phases",
        "details": "Build components/forms/CompetitionForm.tsx for competition CRUD with date range validation. Create app/api/competitions/route.ts for competition management. Implement reference data management for distancias, estilos, fases with proper seeding. Create selection components for all reference data types. Build admin interface for managing reference data with proper validation and error handling.",
        "testStrategy": "Test all reference data CRUD operations, verify date range validation for competitions, ensure proper foreign key relationships, and validate selection components work in forms.",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Create Manual Metrics Entry Form",
        "description": "Build the comprehensive form for manual metric entry with real-time validation",
        "details": "Create components/forms/MetricsForm.tsx with React Hook Form implementing the complete MetricFormSchema. Include sections for: basic info (swimmer, competition, date, distance, stroke, phase), first segment metrics (T15_1, BRZ_1, T25_1, F1), second segment metrics (T15_2, BRZ_2, T25_2, F2), global metrics (T_TOTAL, BRZ_TOTAL). Implement real-time validation feedback, consistency checking (T25 > T15, T_TOTAL ≥ segments), and automatic calculation preview. Add form state persistence and submission with loading states.",
        "testStrategy": "Test all validation rules trigger correctly, verify consistency checks work in real-time, validate form submission handles errors gracefully, and ensure form state persists during navigation.",
        "priority": "high",
        "dependencies": [
          10,
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Implement CSV Upload and Processing",
        "description": "Create CSV file upload functionality with validation and batch processing",
        "details": "Build components/data/CSVUploader.tsx with drag-and-drop interface, file validation (CSV format, size limits), and preview functionality. Create app/api/upload-csv/route.ts as proxy to Python serverless function. Implement api/utils/csv_processor.py with pandas for CSV parsing, data validation, and batch insertion. Support CSV format: fecha,nadador,competencia,distancia,estilo,fase,t15_1,brz_1,t25_1,f1,t15_2,brz_2,t25_2,f2,t_total,brz_total. Include progress tracking, error reporting, and rollback on validation failures.",
        "testStrategy": "Test CSV upload with valid and invalid files, verify batch processing handles large datasets, validate error reporting shows specific row/column issues, and ensure rollback works on failures.",
        "priority": "high",
        "dependencies": [
          9,
          13
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Build Automatic Metrics Calculation Engine",
        "description": "Implement the core calculation engine for the 6 automatic swimming metrics",
        "details": "Complete the SwimmingMetricsCalculator class in api/calculations/swimming_metrics.py with methods: calculate_segment_velocity (V1, V2 = 25/T25), calculate_average_velocity (V_promedio = 50/T_TOTAL), calculate_distance_per_stroke (DIST x BRZ = 50/BRZ_TOTAL), calculate_distance_without_underwater (DIST sin F = 50 - (F1 + F2)), calculate_average_underwater (F promedio = (F1 + F2)/2). Integrate calculation engine with data ingestion pipeline to automatically compute and store calculated metrics when manual metrics are submitted.",
        "testStrategy": "Test each calculation formula with known inputs and expected outputs, verify calculations are triggered automatically on data ingestion, validate calculated metrics are stored correctly in database, and ensure error handling for edge cases (division by zero, negative values).",
        "priority": "high",
        "dependencies": [
          9,
          14
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement SwimmingMetricsCalculator Class",
            "description": "Develop the SwimmingMetricsCalculator class in api/calculations/swimming_metrics.py with methods to calculate the six automatic swimming metrics.",
            "dependencies": [],
            "details": "Create methods for calculate_segment_velocity, calculate_average_velocity, calculate_distance_per_stroke, calculate_distance_without_underwater, and calculate_average_underwater as specified.",
            "status": "pending",
            "testStrategy": "Unit tests for each method using sample input data to verify correct calculations."
          },
          {
            "id": 2,
            "title": "Integrate Calculation Engine with Data Ingestion Pipeline",
            "description": "Connect the SwimmingMetricsCalculator with the data ingestion pipeline to automatically compute and store metrics upon manual metric submission.",
            "dependencies": [
              1
            ],
            "details": "Modify the data ingestion pipeline to invoke the calculation engine when new manual metrics are submitted, ensuring calculated metrics are stored appropriately.",
            "status": "pending",
            "testStrategy": "Integration tests to confirm that manual metric submissions trigger calculations and storage of computed metrics."
          },
          {
            "id": 3,
            "title": "Implement Data Validation and Error Handling",
            "description": "Add validation checks and error handling mechanisms to ensure data integrity during metric calculations and ingestion.",
            "dependencies": [
              1,
              2
            ],
            "details": "Implement checks for data completeness, type correctness, and handle exceptions gracefully to prevent pipeline failures.",
            "status": "pending",
            "testStrategy": "Test cases with invalid and incomplete data to verify that validation and error handling work as intended."
          },
          {
            "id": 4,
            "title": "Optimize Performance of Calculation Engine",
            "description": "Enhance the performance of the SwimmingMetricsCalculator to handle large datasets efficiently.",
            "dependencies": [
              1
            ],
            "details": "Refactor code to improve computational efficiency, possibly by implementing vectorized operations or parallel processing where applicable.",
            "status": "pending",
            "testStrategy": "Benchmark tests to measure performance improvements and ensure scalability."
          },
          {
            "id": 5,
            "title": "Develop Monitoring and Logging Mechanisms",
            "description": "Set up monitoring and logging for the calculation engine and data ingestion pipeline to track performance and identify issues.",
            "dependencies": [
              2,
              3
            ],
            "details": "Implement logging of key events and metrics, and establish monitoring dashboards to observe system health and performance.",
            "status": "pending",
            "testStrategy": "Simulate various scenarios to ensure logs are generated correctly and monitoring tools capture the necessary data."
          },
          {
            "id": 6,
            "title": "Document System Architecture and Usage",
            "description": "Create comprehensive documentation detailing the system architecture, data flow, and usage instructions for the calculation engine and data ingestion pipeline.",
            "dependencies": [
              1,
              2,
              3,
              4,
              5
            ],
            "details": "Include diagrams of system components, explanations of data processing steps, and guidelines for maintenance and troubleshooting.",
            "status": "pending",
            "testStrategy": "Review documentation for completeness and clarity; gather feedback from team members to ensure usability."
          }
        ]
      },
      {
        "id": 16,
        "title": "Create Chart.js Visualization Components",
        "description": "Build interactive charts for metrics visualization using Chart.js with Phoenix theme",
        "details": "Create components/charts/ directory with: MetricsChart.tsx (line chart for metric progression over time), ProgressChart.tsx (multi-line chart for swimmer progress comparison), ComparisonChart.tsx (radar chart for multi-metric swimmer comparison), RankingTable.tsx (sortable table with Phoenix styling). Configure Chart.js with Phoenix color scheme, responsive design, interactive tooltips, and export functionality. Implement lib/utils/chart-configs.ts with reusable chart configurations and Phoenix theme integration.",
        "testStrategy": "Test charts render correctly with real data, verify responsive behavior on different screen sizes, validate interactive features (hover, click, zoom), and ensure Phoenix theme is applied consistently.",
        "priority": "high",
        "dependencies": [
          5,
          15
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Set Up Project Structure and Install Dependencies",
            "description": "Create the necessary directory structure and install Chart.js for the project.",
            "dependencies": [],
            "details": "Create a 'components/charts/' directory and install Chart.js using npm.",
            "status": "pending",
            "testStrategy": "Verify that the directory structure is correct and that Chart.js is installed by checking the package.json file."
          },
          {
            "id": 2,
            "title": "Develop MetricsChart Component",
            "description": "Implement the MetricsChart.tsx component to display a line chart for metric progression over time.",
            "dependencies": [
              1
            ],
            "details": "Use Chart.js to create a line chart that visualizes metric progression over time.",
            "status": "pending",
            "testStrategy": "Ensure the chart renders correctly with sample data and responds to data updates."
          },
          {
            "id": 3,
            "title": "Develop ProgressChart Component",
            "description": "Implement the ProgressChart.tsx component to display a multi-line chart for swimmer progress comparison.",
            "dependencies": [
              1
            ],
            "details": "Use Chart.js to create a multi-line chart that compares the progress of different swimmers.",
            "status": "pending",
            "testStrategy": "Verify that multiple lines are displayed correctly and that the chart updates with new data."
          },
          {
            "id": 4,
            "title": "Develop ComparisonChart Component",
            "description": "Implement the ComparisonChart.tsx component to display a radar chart for multi-metric swimmer comparison.",
            "dependencies": [
              1
            ],
            "details": "Use Chart.js to create a radar chart that compares multiple metrics for swimmers.",
            "status": "pending",
            "testStrategy": "Check that the radar chart displays all metrics accurately and handles various data inputs."
          },
          {
            "id": 5,
            "title": "Develop RankingTable Component",
            "description": "Implement the RankingTable.tsx component to display a sortable table with Phoenix styling.",
            "dependencies": [
              1
            ],
            "details": "Create a sortable table component styled according to the Phoenix theme.",
            "status": "pending",
            "testStrategy": "Ensure the table sorts correctly by different columns and matches the Phoenix design guidelines."
          },
          {
            "id": 6,
            "title": "Configure Chart.js with Phoenix Theme",
            "description": "Set up Chart.js with the Phoenix color scheme, responsive design, interactive tooltips, and export functionality.",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "Implement a reusable chart configuration in 'lib/utils/chart-configs.ts' that integrates the Phoenix theme and includes features like responsive design, interactive tooltips, and export options.",
            "status": "pending",
            "testStrategy": "Apply the configuration to all chart components and verify that the theme and features are consistent across charts."
          }
        ]
      },
      {
        "id": 17,
        "title": "Implement Data Filtering System",
        "description": "Create comprehensive filtering system for metrics analysis",
        "details": "Build components/data/DataFilters.tsx with filter controls for: temporal filters (date range picker), context filters (swimmer multi-select, competition select, distance select, stroke select, phase select), metric filters (parameter selection, manual/automatic toggle), performance filters (time range slider, velocity range slider). Create lib/hooks/useFilters.ts for filter state management and URL synchronization. Implement filter persistence and reset functionality.",
        "testStrategy": "Test all filter combinations work correctly, verify URL synchronization maintains filter state on page refresh, validate filter persistence across sessions, and ensure filter reset clears all selections.",
        "priority": "medium",
        "dependencies": [
          8,
          16
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Build Main Dashboard Page",
        "description": "Create the primary dashboard with key metrics overview and navigation",
        "details": "Build app/page.tsx as main dashboard with: header metrics cards (total swimmers, active competitions, recent analyses), main visualization area (progression chart for last 30 days, stroke distribution chart, top 5 swimmers by improvement), quick action buttons (new record, upload CSV, view rankings). Implement real-time data updates, loading states, and error boundaries. Use Zustand stores for data management and implement proper SEO metadata.",
        "testStrategy": "Test dashboard loads within 2 seconds, verify all metrics display correctly, validate quick actions navigate properly, and ensure real-time updates work without page refresh.",
        "priority": "high",
        "dependencies": [
          16,
          17
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Create Data Entry Pages",
        "description": "Build the data entry interface with manual and CSV upload options",
        "details": "Create app/data-entry/page.tsx with selection between manual entry and CSV upload. Build app/data-entry/manual/page.tsx integrating MetricsForm component with submission handling and success feedback. Create app/data-entry/csv/page.tsx with CSVUploader component, processing status, and batch results display. Implement proper navigation flow, form state management, and error handling throughout the data entry process.",
        "testStrategy": "Test navigation between manual and CSV entry modes, verify form submissions work correctly, validate CSV processing shows proper progress and results, and ensure error states are handled gracefully.",
        "priority": "high",
        "dependencies": [
          13,
          14,
          18
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Build Analytics and Visualization Pages",
        "description": "Create comprehensive analytics interface with charts and comparisons",
        "details": "Build app/analytics/page.tsx as main analytics dashboard with filterable charts and metrics overview. Create app/analytics/swimmer/[id]/page.tsx for individual swimmer profiles with detailed progression charts and personal records. Build app/analytics/compare/page.tsx for multi-swimmer comparison with radar charts and side-by-side metrics. Create app/analytics/rankings/page.tsx with sortable rankings by stroke, distance, and time period.",
        "testStrategy": "Test all analytics pages load correctly with real data, verify individual swimmer profiles show accurate information, validate comparison functionality works with multiple swimmers, and ensure rankings are sortable and filterable.",
        "priority": "high",
        "dependencies": [
          16,
          17,
          19
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Implement API Routes and Data Layer",
        "description": "Complete the Next.js API routes for frontend-backend communication",
        "details": "Build app/api/swimmers/route.ts with full CRUD operations, proper error handling, and response formatting. Create app/api/competitions/route.ts for competition management. Build app/api/metrics/route.ts for metrics querying with filtering support. Create app/api/upload-csv/route.ts as proxy to Python serverless functions. Implement proper HTTP status codes, error responses, and request validation for all endpoints.",
        "testStrategy": "Test all API endpoints with various inputs, verify error handling returns appropriate status codes, validate request/response formats match TypeScript interfaces, and ensure proper authentication/authorization where needed.",
        "priority": "medium",
        "dependencies": [
          15,
          20
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "Add Custom React Hooks for Data Management",
        "description": "Create custom hooks for efficient data fetching and state management",
        "details": "Build lib/hooks/useSwimmers.ts with swimmer CRUD operations, caching, and optimistic updates. Create lib/hooks/useMetrics.ts for metrics data fetching with filtering and pagination. Build lib/hooks/useChartData.ts for chart data transformation and caching. Implement lib/hooks/useFilters.ts for filter state management and URL synchronization. Add proper error handling, loading states, and TypeScript typing to all hooks.",
        "testStrategy": "Test hooks handle loading and error states correctly, verify caching reduces unnecessary API calls, validate optimistic updates work with proper rollback, and ensure hooks are properly typed and reusable.",
        "priority": "medium",
        "dependencies": [
          21
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Implement Performance Optimizations",
        "description": "Optimize application performance for fast loading and smooth interactions",
        "details": "Implement Next.js performance optimizations: dynamic imports for heavy components, image optimization for assets, font optimization with next/font. Add React optimizations: memo for expensive components, useMemo for calculations, useCallback for event handlers. Implement caching strategies: Zustand persistence, API response caching, chart data memoization. Configure bundle analysis and code splitting for optimal loading. Add loading skeletons and progressive enhancement.",
        "testStrategy": "Measure and verify initial load time < 2 seconds, validate bundle size < 500KB (excluding Chart.js), test smooth interactions on low-end devices, and ensure caching reduces redundant API calls.",
        "priority": "medium",
        "dependencies": [
          22
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Add Error Handling and Loading States",
        "description": "Implement comprehensive error handling and user feedback systems",
        "details": "Create error boundary components for graceful error handling, implement toast notifications for user feedback, add loading spinners and skeletons for all async operations. Build error pages (404, 500) with Phoenix theme. Implement retry mechanisms for failed API calls, offline state detection, and proper error logging. Create user-friendly error messages and recovery suggestions.",
        "testStrategy": "Test error boundaries catch and display errors properly, verify loading states show during all async operations, validate error messages are user-friendly and actionable, and ensure retry mechanisms work correctly.",
        "priority": "medium",
        "dependencies": [
          23
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "Final Testing and MVP Validation",
        "description": "Comprehensive testing and validation of all MVP requirements",
        "details": "Perform end-to-end testing of all user flows: swimmer creation, manual metric entry, CSV upload, data visualization, filtering, and analytics. Validate all acceptance criteria: performance benchmarks (< 2s load time, < 500ms processing), responsive design (320px-1920px), Phoenix theme consistency, data accuracy of automatic calculations. Test with real swimming data, verify database integrity, and ensure proper error handling throughout the application. Prepare deployment configuration and documentation.",
        "testStrategy": "Execute complete user journey testing, validate all acceptance criteria are met, perform cross-browser and device testing, verify data accuracy with manual calculations, and ensure application is ready for production deployment.",
        "priority": "high",
        "dependencies": [
          24
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-24T05:43:45.977Z",
      "updated": "2025-06-24T20:02:46.670Z",
      "description": "Tasks for master context"
    }
  }
}