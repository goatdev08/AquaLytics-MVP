# AquaLytics - Product Requirements Document (PRD)
## Documento Optimizado para TaskMaster AI

---

## 1. Executive Summary

**AquaLytics** es una aplicación web moderna para análisis avanzado de rendimiento en natación competitiva. La aplicación permite a entrenadores capturar, procesar y visualizar métricas detalladas de rendimiento de nadadores, proporcionando insights valiosos para optimizar el entrenamiento.

**Valor Core:** Transformar datos manuales de natación en insights visuales accionables para mejorar el rendimiento deportivo.

**Stack Tecnológico:** Next.js 15 + React 18 LTS + Python Serverless + Supabase PostgreSQL

---

## 2. Objetivos del MVP

### Objetivos Primarios:
1. **Ingesta de Datos:** Permitir entrada manual y carga CSV de métricas de natación
2. **Cálculo Automático:** Procesar 6 métricas automáticas desde 10 métricas manuales
3. **Visualización:** Mostrar gráficos interactivos y modernos de rendimiento
4. **Análisis Comparativo:** Rankings por estilo y progresión temporal
5. **Gestión de Datos:** CRUD completo conectado a Supabase 'Phoenixdb'

### Métricas de Éxito:
- Tiempo de carga inicial < 2 segundos
- Procesamiento de datos < 500ms para 100 registros
- Interfaz responsive en dispositivos 320px - 1920px
- Adopción por 3+ entrenadores en primeras 2 semanas

---

## 3. Usuarios y Roles

### Usuario Principal: **Entrenadores**
- **Acceso:** Completo (CRUD)
- **Funciones:** Ingreso de datos, análisis, comparaciones, reportes
- **Contexto de Uso:** Análisis post-entrenamiento, planificación, evaluación de progreso

### Usuario Secundario: **Nadadores** 
- **Acceso:** Solo lectura
- **Funciones:** Visualización de su progreso personal
- **Implementación:** Post-MVP (con autenticación)

---

## 4. Arquitectura Técnica

### 4.1 Stack Tecnológico Actualizado

#### Frontend:
```typescript
- Next.js 15 (App Router)
- React 18 LTS (estable, no beta)
- TypeScript 5.x
- TailwindCSS 3.x (tema Phoenix)
- Chart.js 4.x + react-chartjs-2 (gráficos MVP)
- Zustand (state management)
- React Hook Form (formularios optimizados)
- @supabase/supabase-js 2.x
```

#### Backend:
```python
- Python 3.11
- Starlette (serverless framework)
- Pandas 2.3 (análisis de datos)
- NumPy 1.27 (cálculos numéricos)
- supabase-py 2.3
- python-multipart (upload CSV)
```

#### Base de Datos:
```sql
- Supabase PostgreSQL
- Proyecto: 'Phoenixdb' (ID: ombbxzdptnasoipzpmfh)
- Real-time capabilities habilitadas
```

### 4.2 Diagrama de Arquitectura

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   Browser       │◄──►│   Next.js 15     │◄──►│  Vercel Python  │
│                 │    │  (React 18 LTS)  │    │   Serverless    │
│ - Chart.js      │    │                  │    │                 │
│ - TailwindCSS   │    │ - Zustand Store  │    │ - Starlette     │
│ - Phoenix Theme │    │ - Hook Forms     │    │ - Pandas        │
└─────────────────┘    └──────────────────┘    └─────────────────┘
                                │                        │
                                └────────┬───────────────┘
                                         ▼
                                ┌─────────────────┐
                                │   Supabase      │
                                │  'Phoenixdb'    │
                                │  PostgreSQL     │
                                └─────────────────┘
```

---

## 5. Base de Datos - Estructura 'Phoenixdb'

### 5.1 Tablas Principales

#### **nadadores** (Swimmers)
```sql
- id_nadador (PK): integer
- nombre: varchar (nombre completo)
- edad: smallint (opcional)
- peso: smallint (opcional, en kg)
```

#### **competencias** (Competitions)
```sql
- competencia_id (PK): integer
- competencia: varchar (nombre del evento)
- periodo: daterange (rango de fechas)
```

#### **distancias** (Distances)
```sql
- distancia_id (PK): integer  
- distancia: integer (metros: 25, 50, 100, 200, 400, 800, 1500.)
```

#### **estilos** (Strokes)
```sql
- estilo_id (PK): integer
- estilo: varchar ('Crol', 'Pecho', 'Dorso', 'Mariposa', 'Combinado')
```

#### **fases** (Phases)
```sql
- fase_id (PK): integer
- fase: varchar ('Entrenamiento', 'Competencia', 'Prueba')
```

#### **parametros** (Parameters/Metrics)
```sql
- parametro_id (PK): integer
- parametro: varchar (nombre técnico de la métrica)
- tipo: char ('M'=Manual, 'A'=Automática)
- global: boolean (true=métrica global, false=por segmento)
```

#### **registros** (Records) - Tabla Central
```sql
- registro_id (PK): bigint
- competencia_id (FK): integer
- fecha: date
- id_nadador (FK): integer
- distancia_id (FK): integer
- estilo_id (FK): integer
- fase_id (FK): integer
- parametro_id (FK): integer
- segmento: integer (1=primer 25m, 2=segundo 25m, null=global)
- valor: numeric (valor de la métrica)
```

### 5.2 Métricas Definidas (16 Total)

#### **Métricas Manuales (10):**
```json
{
  "manuales": [
    {"parametro": "T15 (1)", "label": "Tiempo 15m (Primer Segmento)", "unit": "seg", "format": "XX.XX"},
    {"parametro": "# de BRZ 1", "label": "Brazadas (Primer Segmento)", "unit": "brazadas", "format": "integer"},
    {"parametro": "T25 (1)", "label": "Tiempo 25m (Primer Segmento)", "unit": "seg", "format": "XX.XX"},
    {"parametro": "F1", "label": "Flecha (Primer Segmento)", "unit": "metros", "format": "X.XX"},
    {"parametro": "T15 (2)", "label": "Tiempo 15m (Segundo Segmento)", "unit": "seg", "format": "XX.XX"},
    {"parametro": "# de BRZ 2", "label": "Brazadas (Segundo Segmento)", "unit": "brazadas", "format": "integer"},
    {"parametro": "T25 (2)", "label": "Tiempo 25m (Segundo Segmento)", "unit": "seg", "format": "XX.XX"},
    {"parametro": "F2", "label": "Flecha (Segundo Segmento)", "unit": "metros", "format": "X.XX"},
    {"parametro": "T TOTAL", "label": "Tiempo Total", "unit": "seg", "format": "XX.XX"},
    {"parametro": "# de BRZ TOTAL", "label": "Total de Brazadas", "unit": "brazadas", "format": "integer"}
  ]
}
```

#### **Métricas Automáticas (6):**
```json
{
  "automaticas": [
    {"parametro": "V1", "label": "Velocidad (Primer Segmento)", "unit": "m/s", "formula": "25 / T25(1)"},
    {"parametro": "V2", "label": "Velocidad (Segundo Segmento)", "unit": "m/s", "formula": "25 / T25(2)"},
    {"parametro": "V promedio", "label": "Velocidad Promedio", "unit": "m/s", "formula": "50 / T_TOTAL"},
    {"parametro": "DIST x BRZ", "label": "Distancia por Brazada", "unit": "m/brazada", "formula": "50 / BRZ_TOTAL"},
    {"parametro": "DIST sin F", "label": "Distancia sin Flecha", "unit": "metros", "formula": "50 - (F1 + F2)"},
    {"parametro": "F promedio", "label": "Promedio de Flecha", "unit": "metros", "formula": "(F1 + F2) / 2"}
  ]
}
```

---

## 6. Estructura de Archivos del Proyecto

```
aqualytics/
├── README.md
├── package.json
├── requirements.txt
├── next.config.js
├── tailwind.config.js
├── tsconfig.json
├── .env.local
├── .gitignore
│
├── app/                          # Next.js App Router
│   ├── globals.css              # Estilos globales + tema Phoenix
│   ├── layout.tsx               # Layout principal con navegación
│   ├── page.tsx                 # Dashboard principal
│   ├── loading.tsx              # Loading UI
│   ├── not-found.tsx           # 404 personalizada
│   │
│   ├── data-entry/             # Ingreso de datos
│   │   ├── page.tsx            # Selección: Manual vs CSV
│   │   ├── manual/
│   │   │   └── page.tsx        # Formulario manual de métricas
│   │   └── csv/
│   │       └── page.tsx        # Upload y procesamiento CSV
│   │
│   ├── analytics/              # Visualización y análisis
│   │   ├── page.tsx            # Dashboard de métricas
│   │   ├── swimmer/
│   │   │   └── [id]/
│   │   │       └── page.tsx    # Perfil individual del nadador
│   │   ├── compare/
│   │   │   └── page.tsx        # Comparación entre nadadores
│   │   └── rankings/
│   │       └── page.tsx        # Rankings por estilo y progresión
│   │
│   └── api/                    # API Routes (Next.js)
│       ├── swimmers/
│       │   └── route.ts        # CRUD nadadores
│       ├── competitions/
│       │   └── route.ts        # CRUD competencias
│       └── upload-csv/
│           └── route.ts        # Proxy a Python serverless
│
├── api/                        # Python Serverless Functions
│   ├── ingest.py              # POST: Ingesta datos + cálculo automático
│   ├── metrics.py             # GET: Consulta métricas y análisis
│   ├── calculations/
│   │   └── swimming_metrics.py # Lógica de cálculo de 6 métricas automáticas
│   └── utils/
│       ├── supabase_client.py # Cliente Supabase configurado
│       ├── data_validation.py # Validaciones de datos
│       └── csv_processor.py   # Procesamiento de archivos CSV
│
├── components/                 # Componentes React reutilizables
│   ├── ui/                    # Componentes base UI
│   │   ├── Button.tsx
│   │   ├── Input.tsx
│   │   ├── Select.tsx
│   │   ├── Card.tsx
│   │   ├── Modal.tsx
│   │   └── LoadingSpinner.tsx
│   │
│   ├── layout/                # Componentes de layout
│   │   ├── Header.tsx         # Header con navegación
│   │   ├── Sidebar.tsx        # Sidebar con filtros
│   │   └── Footer.tsx
│   │
│   ├── forms/                 # Formularios específicos
│   │   ├── SwimmerForm.tsx    # Formulario de nadador
│   │   ├── MetricsForm.tsx    # Formulario de métricas manuales
│   │   └── CompetitionForm.tsx # Formulario de competencia
│   │
│   ├── charts/                # Componentes de visualización
│   │   ├── MetricsChart.tsx   # Gráfico de métricas (Chart.js)
│   │   ├── ProgressChart.tsx  # Gráfico de progresión temporal
│   │   ├── ComparisonChart.tsx # Gráfico de comparación
│   │   └── RankingTable.tsx   # Tabla de rankings
│   │
│   └── data/                  # Componentes de gestión de datos
│       ├── DataSourceSelector.tsx # Selector CSV vs BD
│       ├── CSVUploader.tsx    # Componente de upload CSV
│       └── DataFilters.tsx    # Filtros de datos
│
├── lib/                       # Utilidades y configuraciones
│   ├── supabase.ts           # Cliente Supabase (frontend)
│   ├── store/                # Zustand stores
│   │   ├── swimmers-store.ts # Estado de nadadores
│   │   ├── metrics-store.ts  # Estado de métricas
│   │   └── ui-store.ts       # Estado de UI (filtros, modales)
│   ├── hooks/                # Custom React hooks
│   │   ├── useSwimmers.ts
│   │   ├── useMetrics.ts
│   │   └── useChartData.ts
│   ├── utils/                # Funciones utilitarias
│   │   ├── formatters.ts     # Formateo de datos
│   │   ├── validators.ts     # Validaciones frontend
│   │   ├── chart-configs.ts  # Configuraciones Chart.js
│   │   └── constants.ts      # Constantes de la aplicación
│   └── types/                # Definiciones TypeScript
│       ├── database.ts       # Tipos de BD Supabase
│       ├── metrics.ts        # Tipos de métricas
│       └── api.ts            # Tipos de API responses
│
├── public/                    # Assets estáticos
│   ├── icons/                # Iconos SVG del tema Phoenix
│   ├── images/               # Imágenes y logos
│   └── sample-data/          # Archivos CSV de ejemplo
│       └── sample-metrics.csv
│
└── docs/                     # Documentación
    ├── api-documentation.md
    ├── database-schema.md
    └── development-guide.md
```

---

## 7. Especificaciones de UX/UI

### 7.1 Tema Visual "Phoenix"

#### **Paleta de Colores:**
```css
/* Colores Phoenix (sutiles pero visibles) */
--phoenix-red: #DC2626      /* Red-600 */
--phoenix-orange: #EA580C   /* Orange-600 */
--phoenix-yellow: #D97706   /* Amber-600 */

/* Gradientes sutiles */
--gradient-phoenix: linear-gradient(135deg, #DC2626 0%, #EA580C 50%, #D97706 100%)
--gradient-phoenix-soft: linear-gradient(135deg, #FEE2E2 0%, #FED7AA 50%, #FEF3C7 100%)

/* Colores neutros */
--gray-50: #F9FAFB
--gray-100: #F3F4F6
--gray-900: #111827
```

#### **Elementos con Gradientes Phoenix:**
- **Headers principales** (H1, títulos de sección)
- **Botones de acción primaria** (Guardar, Analizar, Exportar)
- **Cards de métricas destacadas** (tiempo total, velocidad promedio)
- **Progress bars** de carga
- **Borders activos** en inputs seleccionados

### 7.2 Responsive Design

#### **Breakpoints:**
```css
/* Mobile First */
- mobile: 320px - 640px   (1 columna)
- tablet: 641px - 1024px  (2 columnas)
- desktop: 1025px+        (3+ columnas)
```

#### **Adaptaciones por Dispositivo:**
- **Mobile:** Navegación hamburger, gráficos stack vertical, formularios single-column
- **Tablet:** Sidebar colapsable, gráficos 2x2 grid
- **Desktop:** Sidebar fija, dashboard multi-column, gráficos inline

### 7.3 Modo Claro/Oscuro

```css
/* Implementación con TailwindCSS dark mode */
.light-theme {
  --bg-primary: #FFFFFF;
  --bg-secondary: #F9FAFB;
  --text-primary: #111827;
  --text-secondary: #6B7280;
}

.dark-theme {
  --bg-primary: #111827;
  --bg-secondary: #1F2937;
  --text-primary: #F9FAFB;
  --text-secondary: #D1D5DB;
}
```

### 7.4 Efectos Hover

#### **Elementos Interactive:**
- **Botones:** Transform scale(1.05) + shadow enhancement
- **Cards:** Lift effect (shadow-lg) + border glow
- **Chart elements:** Highlight + tooltip
- **Navigation items:** Background gradient fade-in
- **Table rows:** Background color transition

---

## 8. Funcionalidades Detalladas

### 8.1 Dashboard Principal

#### **Componentes:**
1. **Header con métricas clave:** Nadadores activos, competencias, último análisis
2. **Gráficos principales:**
   - Progresión temporal de velocidad promedio (últimos 30 días)
   - Distribución de estilos por rendimiento
   - Top 5 nadadores por mejora reciente
3. **Acciones rápidas:** Nuevo registro, Cargar CSV, Ver rankings

### 8.2 Ingreso de Datos

#### **8.2.1 Formulario Manual:**
```typescript
interface MetricFormData {
  // Información básica
  swimmer_id: number;
  competition_id: number;
  date: string;
  distance_id: number;
  stroke_id: number;
  phase_id: number;
  
  // Métricas manuales del primer segmento
  t15_1: number;    // Formato: XX.XX
  brz_1: number;    // Entero
  t25_1: number;    // Formato: XX.XX
  f1: number;       // Formato: X.XX
  
  // Métricas manuales del segundo segmento
  t15_2: number;
  brz_2: number;
  t25_2: number;
  f2: number;
  
  // Métricas globales manuales
  t_total: number;
  brz_total: number;
}
```

#### **Validaciones en Tiempo Real:**
- **Tiempos:** Rango 5.00 - 180.00 segundos
- **Brazadas:** Rango 1 - 100 brazadas
- **Flecha:** Rango 0.00 - 15.00 metros
- **Consistencia:** T_TOTAL ≥ (T25_1 + T25_2)

#### **8.2.2 Carga CSV:**
```csv
# Formato esperado CSV
fecha,nadador,competencia,distancia,estilo,fase,t15_1,brz_1,t25_1,f1,t15_2,brz_2,t25_2,f2,t_total,brz_total
2024-01-15,Juan Pérez,Nacional 2024,50,Crol,Competencia,7.23,8,12.45,8.5,7.89,9,13.12,7.8,25.57,17
```

### 8.3 Sistema de Filtros

#### **Filtros Disponibles:**
```typescript
interface DataFilters {
  // Filtros temporales
  dateFrom: string;
  dateTo: string;
  
  // Filtros de contexto
  swimmers: number[];        // IDs de nadadores
  competitions: number[];    // IDs de competencias
  distances: number[];       // IDs de distancias
  strokes: number[];         // IDs de estilos
  phases: number[];          // IDs de fases
  
  // Filtros de métricas
  parameters: number[];      // IDs de parámetros
  metricType: 'M' | 'A' | 'all'; // Manual, Automática o Todas
  
  // Filtros de rendimiento
  timeRange: [number, number]; // Rango de tiempos
  velocityRange: [number, number]; // Rango de velocidades
}
```

### 8.4 Visualizaciones Chart.js

#### **8.4.1 Gráfico de Progresión Temporal:**
```typescript
// Configuración Chart.js para progresión
const progressionConfig = {
  type: 'line',
  data: {
    datasets: [{
      label: 'Velocidad Promedio',
      borderColor: 'linear-gradient(135deg, #DC2626, #EA580C)',
      backgroundColor: 'rgba(220, 38, 38, 0.1)',
      tension: 0.4
    }]
  },
  options: {
    responsive: true,
    interaction: {
      intersect: false,
      mode: 'index'
    },
    plugins: {
      tooltip: {
        backgroundColor: 'rgba(17, 24, 39, 0.95)',
        titleColor: '#F9FAFB',
        bodyColor: '#D1D5DB'
      }
    }
  }
};
```

#### **8.4.2 Gráfico de Comparación de Nadadores:**
```typescript
// Radar chart para comparación multi-métrica
const comparisonConfig = {
  type: 'radar',
  data: {
    labels: ['Velocidad', 'Eficiencia', 'Consistencia', 'Técnica'],
    datasets: [
      {
        label: 'Nadador A',
        borderColor: '#DC2626',
        backgroundColor: 'rgba(220, 38, 38, 0.2)'
      },
      {
        label: 'Nadador B', 
        borderColor: '#EA580C',
        backgroundColor: 'rgba(234, 88, 12, 0.2)'
      }
    ]
  }
};
```

### 8.5 Rankings y Comparaciones

#### **8.5.1 Ranking por Estilo:**
```sql
-- Query SQL para ranking por estilo
SELECT 
  n.nombre as swimmer_name,
  AVG(r1.valor) as avg_time,
  COUNT(*) as races_count,
  MIN(r1.valor) as best_time
FROM registros r1
JOIN nadadores n ON r1.id_nadador = n.id_nadador
JOIN parametros p ON r1.parametro_id = p.parametro_id
JOIN estilos e ON r1.estilo_id = e.estilo_id
WHERE p.parametro = 'T TOTAL' 
  AND e.estilo = 'Crol'
  AND r1.fecha >= '2024-01-01'
GROUP BY n.id_nadador, n.nombre
ORDER BY best_time ASC
LIMIT 10;
```

#### **8.5.2 Progresión Temporal Interactiva:**
- **Slider temporal:** Rango de fechas ajustable
- **Comparación multi-nadador:** Hasta 4 nadadores simultáneos
- **Métricas seleccionables:** Toggle entre diferentes parámetros
- **Export de resultados:** CSV de datos del gráfico

---

## 9. API Endpoints

### 9.1 Next.js API Routes (TypeScript)

#### **GET /api/swimmers**
```typescript
// Listar todos los nadadores con métricas básicas
interface SwimmerResponse {
  id_nadador: number;
  nombre: string;
  edad?: number;
  peso?: number;
  total_races: number;
  best_time?: number;
  latest_race_date?: string;
}
```

#### **POST /api/swimmers**
```typescript
// Crear nuevo nadador
interface CreateSwimmerRequest {
  nombre: string;
  edad?: number;
  peso?: number;
}
```

### 9.2 Python Serverless Functions

#### **POST /api/ingest.py**
```python
# Ingesta de datos con cálculo automático
@app.route('/ingest', methods=['POST'])
async def ingest_metrics(request):
    """
    Procesa datos manuales y calcula métricas automáticas
    
    Input: JSON con métricas manuales
    Output: Confirmación + métricas calculadas
    """
    # 1. Validar datos de entrada
    # 2. Insertar métricas manuales en BD
    # 3. Calcular 6 métricas automáticas
    # 4. Insertar métricas automáticas
    # 5. Retornar resumen
```

#### **GET /api/metrics.py**
```python
# Consulta de métricas con filtros
@app.route('/metrics', methods=['GET'])
async def get_metrics(request):
    """
    Consulta métricas con filtros múltiples
    
    Query params: swimmer_id, competition_id, date_from, date_to, etc.
    Output: Datos formateados para gráficos
    """
```

---

## 10. Lógica de Cálculo de Métricas Automáticas

### 10.1 Implementación Python

```python
# api/calculations/swimming_metrics.py

class SwimmingMetricsCalculator:
    """
    Calcula las 6 métricas automáticas basadas en datos manuales
    """
    
    @staticmethod
    def calculate_segment_velocity(distance: float, time: float) -> float:
        """
        Calcula velocidad de segmento
        Fórmula: V = Distancia / Tiempo
        """
        if time <= 0:
            raise ValueError("Tiempo debe ser mayor a 0")
        return distance / time
    
    @staticmethod
    def calculate_average_velocity(total_distance: float, total_time: float) -> float:
        """
        Calcula velocidad promedio
        Fórmula: V_prom = Distancia_total / Tiempo_total
        """
        return SwimmingMetricsCalculator.calculate_segment_velocity(total_distance, total_time)
    
    @staticmethod
    def calculate_distance_per_stroke(total_distance: float, total_strokes: int) -> float:
        """
        Calcula distancia por brazada
        Fórmula: DPS = Distancia_total / Brazadas_total
        """
        if total_strokes <= 0:
            raise ValueError("Brazadas deben ser mayor a 0")
        return total_distance / total_strokes
    
    @staticmethod
    def calculate_distance_without_underwater(total_distance: float, f1: float, f2: float) -> float:
        """
        Calcula distancia sin fase subacuática (flecha)
        Fórmula: Dist_sin_F = Distancia_total - (F1 + F2)
        """
        return total_distance - (f1 + f2)
    
    @staticmethod
    def calculate_average_underwater(f1: float, f2: float) -> float:
        """
        Calcula promedio de fase subacuática
        Fórmula: F_promedio = (F1 + F2) / 2
        """
        return (f1 + f2) / 2
    
    def calculate_all_automatic_metrics(self, manual_data: dict) -> dict:
        """
        Calcula todas las métricas automáticas
        
        Args:
            manual_data: Dict con métricas manuales requeridas
            
        Returns:
            Dict con 6 métricas automáticas calculadas
        """
        try:
            # Extraer datos manuales
            t25_1 = manual_data['t25_1']
            t25_2 = manual_data['t25_2'] 
            t_total = manual_data['t_total']
            brz_total = manual_data['brz_total']
            f1 = manual_data['f1']
            f2 = manual_data['f2']
            
            # Constantes
            SEGMENT_DISTANCE = 25.0
            TOTAL_DISTANCE = 50.0
            
            # Calcular métricas automáticas
            v1 = self.calculate_segment_velocity(SEGMENT_DISTANCE, t25_1)
            v2 = self.calculate_segment_velocity(SEGMENT_DISTANCE, t25_2)
            v_promedio = self.calculate_average_velocity(TOTAL_DISTANCE, t_total)
            dist_por_brz = self.calculate_distance_per_stroke(TOTAL_DISTANCE, brz_total)
            dist_sin_f = self.calculate_distance_without_underwater(TOTAL_DISTANCE, f1, f2)
            f_promedio = self.calculate_average_underwater(f1, f2)
            
            return {
                'V1': round(v1, 3),
                'V2': round(v2, 3),
                'V promedio': round(v_promedio, 3),
                'DIST x BRZ': round(dist_por_brz, 2),
                'DIST sin F': round(dist_sin_f, 2),
                'F promedio': round(f_promedio, 2)
            }
            
        except Exception as e:
            raise ValueError(f"Error calculando métricas automáticas: {str(e)}")
```

---

## 11. Validaciones de Datos

### 11.1 Validaciones Frontend (React Hook Form + Zod)

```typescript
// lib/utils/validators.ts

import { z } from 'zod';

export const MetricFormSchema = z.object({
  // Información básica
  swimmer_id: z.number().min(1, "Selecciona un nadador"),
  competition_id: z.number().min(1, "Selecciona una competencia"),
  date: z.string().min(1, "Fecha es requerida"),
  distance_id: z.number().min(1, "Selecciona una distancia"),
  stroke_id: z.number().min(1, "Selecciona un estilo"),
  phase_id: z.number().min(1, "Selecciona una fase"),
  
  // Métricas del primer segmento
  t15_1: z.number()
    .min(3.0, "Tiempo mínimo: 3.00 segundos")
    .max(30.0, "Tiempo máximo: 30.00 segundos")
    .refine(val => Number(val.toFixed(2)) === val, "Máximo 2 decimales"),
    
  brz_1: z.number()
    .int("Debe ser un número entero")
    .min(1, "Mínimo: 1 brazada")
    .max(50, "Máximo: 50 brazadas"),
    
  t25_1: z.number()
    .min(5.0, "Tiempo mínimo: 5.00 segundos")
    .max(60.0, "Tiempo máximo: 60.00 segundos")
    .refine(val => Number(val.toFixed(2)) === val, "Máximo 2 decimales"),
    
  f1: z.number()
    .min(0.0, "Mínimo: 0.00 metros")
    .max(15.0, "Máximo: 15.00 metros")
    .refine(val => Number(val.toFixed(2)) === val, "Máximo 2 decimales"),
    
  // Validaciones de consistencia temporal
}).refine(data => {
  return data.t25_1 > data.t15_1;
}, {
  message: "T25 debe ser mayor que T15",
  path: ["t25_1"]
}).refine(data => {
  return data.t_total >= (data.t25_1 + data.t25_2);
}, {
  message: "Tiempo total debe ser ≥ suma de segmentos",
  path: ["t_total"]
});
```

### 11.2 Validaciones Backend (Python)

```python
# api/utils/data_validation.py

from typing import Dict, List, Tuple
import re

class DataValidator:
    """
    Validador de datos de métricas de natación
    """
    
    # Rangos válidos por métrica
    VALIDATION_RULES = {
        't15_1': {'min': 3.0, 'max': 30.0, 'decimals': 2},
        't15_2': {'min': 3.0, 'max': 30.0, 'decimals': 2},
        't25_1': {'min': 5.0, 'max': 60.0, 'decimals': 2},
        't25_2': {'min': 5.0, 'max': 60.0, 'decimals': 2},
        't_total': {'min': 10.0, 'max': 120.0, 'decimals': 2},
        'brz_1': {'min': 1, 'max': 50, 'type': 'integer'},
        'brz_2': {'min': 1, 'max': 50, 'type': 'integer'},
        'brz_total': {'min': 2, 'max': 100, 'type': 'integer'},
        'f1': {'min': 0.0, 'max': 15.0, 'decimals': 2},
        'f2': {'min': 0.0, 'max': 15.0, 'decimals': 2}
    }
    
    def validate_single_metric(self, metric_name: str, value: float) -> Tuple[bool, str]:
        """
        Valida una métrica individual
        
        Returns:
            Tuple[bool, str]: (is_valid, error_message)
        """
        if metric_name not in self.VALIDATION_RULES:
            return False, f"Métrica desconocida: {metric_name}"
        
        rules = self.VALIDATION_RULES[metric_name]
        
        # Validar tipo integer
        if rules.get('type') == 'integer':
            if not isinstance(value, int) or value != int(value):
                return False, f"{metric_name} debe ser un número entero"
        
        # Validar rango
        if value < rules['min'] or value > rules['max']:
            return False, f"{metric_name} debe estar entre {rules['min']} y {rules['max']}"
        
        # Validar decimales
        if 'decimals' in rules:
            decimal_places = len(str(value).split('.')[-1]) if '.' in str(value) else 0
            if decimal_places > rules['decimals']:
                return False, f"{metric_name} máximo {rules['decimals']} decimales"
        
        return True, ""
    
    def validate_consistency(self, data: Dict) -> List[str]:
        """
        Valida consistencia entre métricas relacionadas
        
        Returns:
            List[str]: Lista de errores de consistencia
        """
        errors = []
        
        # T25 > T15 para cada segmento
        if data.get('t25_1', 0) <= data.get('t15_1', 0):
            errors.append("T25(1) debe ser mayor que T15(1)")
        
        if data.get('t25_2', 0) <= data.get('t15_2', 0):
            errors.append("T25(2) debe ser mayor que T15(2)")
        
        # Tiempo total >= suma de segmentos
        t_total = data.get('t_total', 0)
        t_segments = data.get('t25_1', 0) + data.get('t25_2', 0)
        if t_total < t_segments:
            errors.append(f"Tiempo total ({t_total}) debe ser ≥ suma de segmentos ({t_segments})")
        
        # Brazadas total >= suma de segmentos
        brz_total = data.get('brz_total', 0)
        brz_segments = data.get('brz_1', 0) + data.get('brz_2', 0)
        if brz_total < brz_segments:
            errors.append(f"Brazadas total ({brz_total}) debe ser ≥ suma de segmentos ({brz_segments})")
        
        return errors
```

---

## 12. Configuración del Entorno

### 12.1 Variables de Entorno

```bash
# .env.local

# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=https://ombbxzdptnasoipzpmfh.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9tYmJ4emRwdG5hc29pcHpwbWZoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg5MDkwMjgsImV4cCI6MjA2NDQ4NTAyOH0.5efbRXhg3JgrEDYRpPSqBe1n0q5Pfjv9CX19F5okAeU
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9tYmJ4emRwdG5hc29pcHpwbWZoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODkwOTAyOCwiZXhwIjoyMDY0NDg1MDI4fQ.kCZDDMfFlN3eeKsQkrGvLeppj88qEVTRBFhKS8Zphq4

# App Configuration
NEXT_PUBLIC_APP_NAME=AquaLytics
NEXT_PUBLIC_APP_VERSION=1.0.0-MVP

# Python API Configuration
PYTHON_API_BASE_URL=https://aqualytics.vercel.app/api

# Development
NODE_ENV=development
```

### 12.2 Dependencies

#### **package.json**
```json
{
  "name": "aqualytics",
  "version": "1.0.0",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "next": "^15.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@supabase/supabase-js": "^2.39.0",
    "zustand": "^4.4.7",
    "react-hook-form": "^7.48.2",
    "@hookform/resolvers": "^3.3.2",
    "zod": "^3.22.4",
    "chart.js": "^4.4.0",
    "react-chartjs-2": "^5.2.0",
    "date-fns": "^2.30.0",
    "clsx": "^2.0.0",
    "tailwind-merge": "^2.0.0"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "typescript": "^5.3.0",
    "tailwindcss": "^3.3.0",
    "autoprefixer": "^10.4.0",
    "postcss": "^8.4.0",
    "eslint": "^8.54.0",
    "eslint-config-next": "^15.0.0"
  }
}
```

#### **requirements.txt**
```txt
starlette==0.36.3
pandas==2.2.0
numpy==1.26.2
supabase-py==2.3.0
python-multipart==0.0.6
python-dotenv==1.0.0
pydantic==2.5.0
uvicorn==0.24.0
httpx==0.25.2
```

---

## 13. Criterios de Aceptación del MVP

### 13.1 Funcionalidades Core ✅

#### **Ingesta de Datos:**
- [ ] Formulario manual funcional con validaciones en tiempo real
- [ ] Upload de CSV con procesamiento automático
- [ ] Cálculo automático de 6 métricas derivadas
- [ ] Almacenamiento correcto en BD Supabase 'Phoenixdb'

#### **Visualización:**
- [ ] Dashboard principal con métricas clave
- [ ] Gráficos Chart.js responsive y interactive
- [ ] Tema Phoenix implementado (gradientes sutiles)
- [ ] Modo claro/oscuro funcional

#### **Análisis:**
- [ ] Sistema de filtros completo (temporal, nadador, estilo, métrica)
- [ ] Rankings por estilo con datos consistentes
- [ ] Comparación de progresión temporal interactiva
- [ ] Exportación de datos de gráficos

### 13.2 Criterios Técnicos ✅

#### **Performance:**
- [ ] Tiempo de carga inicial < 2 segundos
- [ ] Procesamiento de CSV < 500ms para 100 registros
- [ ] Gráficos renderizados < 200ms
- [ ] Bundle size total < 500KB (sin Chart.js cache)

#### **UX/UI:**
- [ ] Responsive design 320px - 1920px
- [ ] Efectos hover consistentes
- [ ] Navegación intuitiva
- [ ] Labels user-friendly (no nombres técnicos de BD)

#### **Calidad de Código:**
- [ ] TypeScript sin errores
- [ ] Componentes reutilizables < 200 líneas
- [ ] Validaciones exhaustivas frontend + backend
- [ ] Manejo de errores elegante

---

## 14. Post-MVP (Roadmap)

### Versión 1.1:
- **Autenticación:** Sistema de usuarios (entrenadores vs nadadores)
- **Notificaciones:** Alertas de datos inconsistentes
- **Plotly.js:** Gráficos avanzados para análisis profundo
- **Exportación:** PDF reports automáticos

### Versión 1.2:
- **ML Analytics:** Predicciones de rendimiento
- **Comparación masiva:** Benchmarking contra bases de datos nacionales
- **Móvil nativo:** React Native app
- **API pública:** Para integración con cronómetros digitales

---

## 15. Notas para TaskMaster AI

### **Importante para la Generación de Tareas:**

1. **Usar nombres exactos de BD:** `nadadores.id_nadador`, `parametros.parametro`, etc.
2. **Labels user-friendly en UI:** "Nadador" en lugar de "id_nadador"
3. **Validaciones dobles:** Frontend (UX) + Backend (seguridad)
4. **Componentes modulares:** Máximo 200 líneas por archivo
5. **Tema Phoenix consistente:** Gradientes sutiles pero visibles
6. **Chart.js configurado:** Para MVP, Plotly.js para post-MVP
7. **Estado centralizado:** Zustand stores por funcionalidad
8. **TypeScript estricto:** Tipado completo de BD y API

### **Estructura de Desarrollo Sugerida:**

2. **Componentes UI base:** Design system Phoenix
3. **Formularios:** Hook Forms + validaciones
4. **API Python:** Cálculos automáticos + ingesta
5. **Visualizaciones:** Chart.js + datos reales
6. **Filtros y análisis:** Zustand + queries optimizadas
7. **Polish y optimización:** Performance + UX final

---

**🎯 Objetivo del MVP:** Una aplicación web funcional, hermosa y rápida que permita a entrenadores analizar el rendimiento de natación con datos reales y visualizaciones profesionales, estableciendo la base para futuras funcionalidades avanzadas.**